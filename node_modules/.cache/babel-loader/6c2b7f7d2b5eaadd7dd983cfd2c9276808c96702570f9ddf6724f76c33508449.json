{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"game\"\n};\nconst _hoisted_2 = [\"width\", \"height\"];\nconst _hoisted_3 = {\n  ref: \"jumpSound\",\n  src: \"https://raw.githubusercontent.com/tao811/DinoJumping/main/jump.mp3\",\n  preload: \"auto\"\n};\nconst _hoisted_4 = {\n  ref: \"defeatSound\",\n  src: \"https://raw.githubusercontent.com/tao811/DinoJumping/main/defeat.mp3\",\n  preload: \"auto\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"canvas\", {\n    id: \"canvas\",\n    ref: \"canvas\",\n    width: $data.canvasWidth,\n    height: $data.canvasHeight\n  }, null, 8, _hoisted_2), _createElementVNode(\"audio\", _hoisted_3, null, 512), _createElementVNode(\"audio\", _hoisted_4, null, 512)]);\n}","map":{"version":3,"names":["class","ref","src","preload","_createElementBlock","_hoisted_1","_createElementVNode","id","width","$data","canvasWidth","height","canvasHeight","_hoisted_2","_hoisted_3","_hoisted_4"],"sources":["E:\\code\\Web\\dino\\src\\components\\game.vue"],"sourcesContent":["<template>\r\n  <div class=\"game\">\r\n    <canvas id=\"canvas\" ref=\"canvas\" :width=\"canvasWidth\" :height=\"canvasHeight\" />\r\n    <audio ref=\"jumpSound\" src=\"https://raw.githubusercontent.com/tao811/DinoJumping/main/jump.mp3\" preload=\"auto\"></audio>\r\n    <audio ref=\"defeatSound\" src=\"https://raw.githubusercontent.com/tao811/DinoJumping/main/defeat.mp3\" preload=\"auto\"></audio>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'playGame',\r\n  data() {\r\n    return {\r\n      ctx: null,\r\n      canvasWidth: 1200,\r\n      canvasHeight: 170,\r\n      dinoX: 10,\r\n      dinoY: 0,\r\n      speed: 0,                   // 画面移动速度\r\n      groundX: 0,                 // 地面坐标\r\n      stage: 0,                   // 游戏阶段\r\n      isRunning: false,           // 地面是否开始移动\r\n      isDied: false,\r\n      currentLeg: 'left',         // 当前小恐龙腿的状态\r\n      currentSwing: 'bird_up',    // 当前家雀翅膀的状态\r\n      legTimer: null,             // 控制左右脚切换的定时器\r\n      swingTimer: null,           // 控制翅膀切换的定时器\r\n      scoreTimer: null,           // 控制增加分数的定时器\r\n      pace: 100,                  // 步频\r\n      swing: 200,                 // 扇翅膀\r\n      isJumping: false,           // 跳跃状态\r\n      isHanging: false,           // 悬空状态\r\n      jumpHeight: 0,              // 当前跳跃高度\r\n      maxHeight: 100,             // 最大跳跃高度\r\n      gravity: 5,                 // 重力加速度\r\n      minGravity: 1,              // 最小重力加速度\r\n      gravityIndex: 1,            // 重力增长系数\r\n      barriers: [],\r\n      clouds: [],\r\n      birds: [],\r\n      barriers_list: [\r\n        {\r\n          name: 'tree1',\r\n          width: 16,\r\n          height: 34\r\n        },\r\n        {\r\n          name: 'tree2',\r\n          width: 49,\r\n          height: 49\r\n        },\r\n        {\r\n          name: 'tree3',\r\n          width: 24,\r\n          height: 47\r\n        },\r\n        {\r\n          name: 'tree4',\r\n          width: 47,\r\n          height: 46\r\n        },\r\n        {\r\n          name: 'tree5',\r\n          width: 23,\r\n          height: 45\r\n        },\r\n        {\r\n          name: 'tree6',\r\n          width: 70,\r\n          height: 48\r\n        }\r\n      ],\r\n      lastBarrierX: 1200,\r\n      lastCloudX: 1200,\r\n      scores: [1, 0, 0, 0, 0, 0],\r\n      score: 0,\r\n      loadedImages: {},           // 存储加载后的图片\r\n      images: {\r\n        initial: \"initial\",\r\n        start: \"start\",\r\n        die: \"die\",\r\n        ground: \"ground\",\r\n        left: \"runl\",\r\n        right: \"runr\",\r\n        jump: \"start\",\r\n        bird_up: \"bird_up\", \r\n        bird_down: \"bird_down\",\r\n        // bird_up: \"111\", \r\n        // bird_down: \"222\",\r\n        tree1: \"tree1\",\r\n        tree2: \"tree2\",\r\n        tree3: \"tree3\",\r\n        tree4: \"tree4\",\r\n        tree5: \"tree5\",\r\n        tree6: \"tree6\",\r\n        over: \"endText\",\r\n        restart: \"restart\",\r\n        cloud: \"cloud\",\r\n        \"0\":\"0\",\r\n        \"1\":\"1\",\r\n        \"2\":\"2\",\r\n        \"3\":\"3\",\r\n        \"4\":\"4\",\r\n        \"5\":\"5\",\r\n        \"6\":\"6\",\r\n        \"7\":\"7\",\r\n        \"8\":\"8\",\r\n        \"9\":\"9\"\r\n      },\r\n      JUMP_STATE_NONE: 0,\r\n      JUMP_STATE_ASCENDING: 1,\r\n      JUMP_STATE_HANGING: 2,\r\n      JUMP_STATE_DESCENDING: 3,\r\n      jumpState: this.JUMP_STATE_NONE,\r\n      deltaTime: 0,\r\n      lastUpdateTime: 0,\r\n      jumpStartTime: 0,\r\n    }\r\n  },\r\n  computed: {\r\n    groundW: function() {return this.loadedImages['ground'].width},\r\n    groundH: function() {return this.loadedImages['ground'].height},\r\n    dinoW: function() {return this.loadedImages['initial'].width},\r\n    dinoH: function() {return this.loadedImages['initial'].height},\r\n    groundY: function() {return this.canvasHeight - this.loadedImages['ground'].height - this.dinoH},\r\n    treeY: function() {\r\n      return this.canvasHeight - this.loadedImages['ground'].height\r\n    }\r\n  },\r\n  methods: {\r\n    // 绘制图片\r\n    drawPic(pic, x, y, w, h) {\r\n      let img = this.loadedImages[pic] // 使用已加载的图片\r\n\r\n      if (!img) return // 如果图片尚未加载，直接返回\r\n\r\n      if (w === undefined) w = img.width\r\n      if (h === undefined) h = img.height\r\n      if (y === undefined) y = this.groundY\r\n      if (x === undefined) x = 0\r\n\r\n      this.ctx.drawImage(img, x, y, w, h)\r\n      // 绘制边框，测试碰撞边界\r\n      // this.drawBorder(x, y, w, h)\r\n    },\r\n    /*  测试碰撞边界\r\n    drawBorder(x, y, w, h, borderColor = 'black', borderSize = 2) {\r\n      // 保存当前的绘图状态\r\n      this.ctx.save();\r\n\r\n      // 设置边框颜色和宽度\r\n      this.ctx.strokeStyle = borderColor;\r\n      this.ctx.lineWidth = borderSize;\r\n\r\n      // 绘制边框矩形\r\n      this.ctx.strokeRect(x, y, w, h);\r\n\r\n      // 恢复之前的绘图状态\r\n      this.ctx.restore();\r\n    },\r\n    */\r\n    // 更新地面位置\r\n    updateGroundPosition() {\r\n      this.groundX -= this.speed\r\n\r\n      if (this.groundX <= -this.canvasWidth) {\r\n        this.groundX = 0\r\n      }\r\n    },\r\n    // 处理键盘函数\r\n    handleKeyDown(e) {\r\n      if (e.key === 'Enter' && !this.isRunning) {\r\n        this.isRunning = true\r\n        this.speed = 2\r\n        this.play() // 启动动画\r\n        this.scrollTimer = setInterval(this.updateScore, 8)\r\n      }\r\n\r\n      if (this.isRunning && e.key === ' ' && !this.isJumping) { // 按下空格键\r\n        this.isJumping = true // 标记为正在跳跃\r\n        this.$refs.jumpSound.play()\r\n        this.jumpHeight = 0 // 重置跳跃高度\r\n        this.jumpState = this.JUMP_STATE_ASCENDING\r\n        this.jumpStartTime = Date.now() // 记录跳跃开始时间\r\n        this.lastUpdateTime = Date.now() // 初始化最后更新时间\r\n      }\r\n    },\r\n    // 加速函数\r\n    accelerate() {\r\n      this.speed += 0.001\r\n      this.pace -= 1\r\n    },\r\n    updateJump() {\r\n      if (this.isJumping) {\r\n        if (this.jumpState === this.JUMP_STATE_ASCENDING) {\r\n          if(this.gravity >= this.minGravity){\r\n            this.gravityIndex += ( this.jumpHeight + 1) * 0.0001\r\n            this.gravity -= ( this.gravity - this.minGravity ) * this.gravityIndex / (( this.maxHeight / this.gravity ))\r\n          }\r\n          this.jumpHeight += this.gravity;\r\n          if (this.jumpHeight >= this.maxHeight) {\r\n            this.jumpState = this.JUMP_STATE_HANGING;\r\n            this.jumpHeight = this.maxHeight;\r\n            this.hangingStartTime = Date.now(); // 记录滞空开始时间\r\n          }\r\n        } else if (this.jumpState === this.JUMP_STATE_HANGING) {\r\n          const hangingDuration = Date.now() - this.hangingStartTime;\r\n          if (hangingDuration > 110) { // 假设滞空时间为110毫秒\r\n            this.jumpState = this.JUMP_STATE_DESCENDING;\r\n            this.gravity = -3; // 设置重力加速度为负值，表示向上\r\n          }\r\n        } else if (this.jumpState === this.JUMP_STATE_DESCENDING) {\r\n          this.jumpHeight += this.gravity\r\n          if (this.jumpHeight <= 0) {\r\n            this.jumpHeight = 0;\r\n            this.isJumping = false;\r\n            this.jumpState = this.JUMP_STATE_NONE;\r\n            this.gravityIndex = 1.5\r\n            this.gravity = 5; // 重置重力加速度为正值，表示向下\r\n          }\r\n        }\r\n      } else {\r\n        // 如果不在跳跃状态，重置跳跃状态\r\n        this.jumpState = this.JUMP_STATE_NONE;\r\n      }\r\n    },\r\n    updateAnimations() {\r\n      // 绘制地面和小恐龙\r\n      if(!this.isDied){\r\n        this.drawPic('ground', this.groundX, this.canvasHeight - this.groundH - 10)\r\n        this.drawPic('start', 10, this.groundY)  // 根据跳跃状态调整y坐标\r\n        // 开始切换左右脚\r\n        this.legTimer = setInterval(() => {\r\n          this.currentLeg = this.currentLeg === 'left' ? 'right' : 'left'\r\n        }, this.pace)\r\n        this.swingTimer = setInterval(() => {\r\n          this.currentSwing = this.currentSwing === 'bird_up' ? 'bird_down' : 'bird_up'\r\n        }, this.swing)\r\n      }\r\n    },\r\n    // 设置障碍物\r\n    setBarrier() {\r\n      const minGap = 300 // 障碍物的间隔\r\n      const maxGap = 800 // 障碍物的间隔\r\n      const x = this.lastBarrierX + Math.random() * (maxGap - minGap) + minGap // 随机生成 x 坐标\r\n      const bar = this.barriers_list[Math.floor(Math.random() * this.barriers_list.length)]\r\n      const n = bar.name\r\n      const w = bar.width\r\n      const h = bar.height\r\n      const y = this.treeY - h\r\n      this.barriers.push({ n, x, y, w, h }) // 将障碍物添加到数组中\r\n      this.lastBarrierX = x\r\n    },\r\n    // 绘制障碍物\r\n    drawBarriers() {\r\n      this.barriers.forEach(barrier => {\r\n        this.drawPic(barrier.n, barrier.x, barrier.y, barrier.w, barrier.h)\r\n        barrier.x -= this.speed // 更新障碍物位置\r\n      })\r\n      // 移除超出画布的障碍物\r\n      this.barriers = this.barriers.filter(barrier => barrier.x + 50 > 0)\r\n    },\r\n    // 设置家雀\r\n    setBird() {\r\n      const minGap = 300 // 家雀的间隔\r\n      const maxGap = 800 // 家雀的间隔\r\n      const x = this.lastBarrierX + Math.random() * (maxGap - minGap) + minGap // 随机生成 x 坐标\r\n      const n = 'bird_up'\r\n      const w = this.loadedImages['bird_up'].width\r\n      const h = this.loadedImages['bird_up'].height\r\n      const y = 50\r\n      this.birds.push({ n, x, y, w, h }) // 将家雀添加到数组中\r\n      this.lastBarrierX = x\r\n    },\r\n    // 绘制家雀\r\n    drawBirds() {\r\n      this.birds.forEach(bird => {\r\n        this.drawPic(this.currentSwing, bird.x, bird.y, bird.w, bird.h)\r\n        bird.x -= this.speed // 更新家雀位置\r\n      })\r\n      // 移除超出画布的家雀\r\n      this.birds = this.birds.filter(bird => bird.x + 50 > 0)\r\n    },\r\n    // 设置云\r\n    setCloud() {\r\n      const minGap = 100 \r\n      const maxGap = 500 \r\n      const x = this.lastCloudX + Math.random() * (maxGap - minGap) + minGap // 随机生成 x 坐标\r\n      const height = Math.random() * 70 + 10\r\n      this.clouds.push({ x, height })\r\n      this.lastCloudX = x\r\n    },\r\n    // 绘制云\r\n    drawClouds() {\r\n      this.clouds.forEach(cloud => {\r\n        this.drawPic('cloud', cloud.x, cloud.height)\r\n        cloud.x -= this.speed * 3 / 2\r\n      })\r\n      // 移除超出画布的障碍物\r\n      this.clouds = this.clouds.filter(cloud => cloud.x + 50 > 0)\r\n    },\r\n    // 更新分数\r\n    updateScore() {\r\n      if(!this.isDied){\r\n        this.score += 1\r\n        this.scores[0] = Math.floor(this.score % 10) // 个位\r\n        this.scores[1] = Math.floor((this.score % 100) / 10) // 十位\r\n        this.scores[2] = Math.floor((this.score % 1000) / 100) // 百位\r\n        this.scores[3] = Math.floor((this.score % 10000) / 1000) // 千位\r\n        this.scores[4] = Math.floor((this.score % 100000) / 10000) // 万位\r\n        this.scores[5] = Math.floor(this.score / 100000) // 十万位 \r\n      }\r\n    },\r\n    // 开始跑步，地面移动 + 小恐龙切换左右脚\r\n    play() {\r\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight)\r\n      \r\n      this.drawBarriers()             // 绘制障碍物\r\n      this.drawClouds()               // 绘制云\r\n      this.drawBirds()                // 绘制家雀\r\n      this.drawPic('ground', this.groundX, this.canvasHeight - this.groundH - 10)         // 绘制地面\r\n      this.drawPic('ground', this.groundX + this.canvasWidth, this.canvasHeight - this.groundH - 10)    // 绘制拼接地面\r\n      this.updateGroundPosition()     // 地面移动\r\n      this.accelerate()               // 设置加速\r\n      this.updateJump()               // 更新跳跃\r\n      this.checkCrash()               // 检测碰撞\r\n      this.stage += 0.01              // 控制家雀在某一阶段才开始出现\r\n\r\n      const dinoY = this.isJumping ? (this.groundY - this.jumpHeight) : this.groundY\r\n      this.dinoY = dinoY\r\n      const dinoP = this.isDied ? 'die' : this.isJumping ? 'start' : this.currentLeg\r\n      this.drawPic(dinoP, this.dinoX, dinoY)  // 根据状态调整恐龙形态\r\n      \r\n      this.deltaTime = Date.now() - this.lastUpdateTime\r\n      this.lastUpdateTime = Date.now()\r\n\r\n\r\n      // 每隔一定时间生成家雀\r\n      if (this.stage >= 1 && this.birds.length === 0 || Math.random() < 0.01) { // 设定生成概率\r\n        this.setBird()\r\n      }\r\n      // 每隔一定时间生成障碍物\r\n      if (this.barriers.length === 0 || Math.random() < 0.02) { // 设定生成概率\r\n        this.setBarrier()\r\n      }\r\n      // 每隔一定时间生成云\r\n      if (this.clouds.length === 0 || Math.random() < 2) { // 设定生成概率\r\n        this.setCloud()\r\n      }\r\n\r\n      \r\n      for(let i = this.scores.length ; i > 0 ; i--){\r\n        this.drawPic(`${this.scores[i]}`,1000 + (5 - i) * 15,20)\r\n      }\r\n      \r\n      if(this.isDied){\r\n        this.drawPic('over', 470, 65)\r\n        this.drawPic('restart',545, 90)\r\n        return\r\n      }\r\n\r\n      // 请求下一帧动画\r\n      requestAnimationFrame(this.play.bind(this))\r\n    },\r\n    // 检测碰撞\r\n    checkCrash() {\r\n      if(!this.isDied){\r\n        this.barriers.forEach(barrier => {\r\n          // 恐龙的右边界超过障碍物的左边界 且 下边界未超过障碍物的上边界\r\n          if (this.dinoX + this.dinoW -5>= barrier.x && \r\n              this.dinoY + this.dinoH -20>= barrier.y ) {\r\n            this.gameOver()\r\n          }\r\n          // else this.score += 15\r\n        })\r\n        this.birds.forEach(bird => {\r\n          // 恐龙的右边界超过障碍物的左边界 且 下边界未超过障碍物的上边界\r\n          if (this.dinoX + this.dinoW >= bird.x && \r\n              this.dinoY <= bird.y + bird.h) {\r\n            this.gameOver()\r\n          }\r\n          // else this.score += 15\r\n        })\r\n      }\r\n    },\r\n    gameOver() {\r\n      // 发生碰撞，执行相应的操作\r\n      console.log(\"碰撞发生！\")\r\n      this.$refs.defeatSound.play()\r\n      this.isDied = true\r\n      this.isRunning = false\r\n      this.speed = 0\r\n    },\r\n    resetGame() {\r\n      if(this.isDied){\r\n        window.location.reload()\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.ctx = this.$refs.canvas.getContext(\"2d\")\r\n    // 预加载图片资源\r\n    const imagePromises = Object.entries(this.images).map(([key, imageSrc]) => {\r\n      return new Promise((resolve, reject) => {\r\n        const img = new Image()\r\n        img.src = require(`/src/assets/images/${imageSrc}.png`)\r\n\r\n        img.onload = () => {\r\n          this.loadedImages[key] = img // 存储已加载的图片\r\n          resolve()\r\n        }\r\n\r\n        img.onerror = () => {\r\n          console.error(`加载图片失败: ${img.src}`)\r\n          reject()\r\n        }\r\n      })\r\n    })\r\n    \r\n    // 确保所有图片资源加载完成后再启动动画\r\n    Promise.all(imagePromises)\r\n    .then(() => {\r\n        this.updateAnimations()       // 初始化\r\n        window.addEventListener('keydown', this.handleKeyDown)  // 监听键盘事件\r\n        document.getElementById('canvas').addEventListener('click', this.resetGame)\r\n      })\r\n      .catch(error => {\r\n        console.error(\"图片加载失败：\", error)\r\n      })\r\n\r\n  },\r\n  unmounted() {\r\n    if (this.legTimer) {\r\n      clearInterval(this.legTimer)\r\n    }\r\n    if (this.swingTimer) {\r\n      clearInterval(this.swingTimer)\r\n    }\r\n    if (this.scoreTimer) {\r\n      clearInterval(this.scoreTimer)\r\n    }\r\n    document.getElementById('canvas').removeEventListener('click', this.resetGame)\r\n    // window.removeEventListener('keydown', this.handleKeyDown)\r\n  }\r\n\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n  #canvas {\r\n    background-color: #fff;\r\n  }\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAM;mBADnB;;EAGWC,GAAG,EAAC,WAAW;EAACC,GAAG,EAAC,oEAAoE;EAACC,OAAO,EAAC;;;EACjGF,GAAG,EAAC,aAAa;EAACC,GAAG,EAAC,sEAAsE;EAACC,OAAO,EAAC;;;uBAH9GC,mBAAA,CAIM,OAJNC,UAIM,GAHJC,mBAAA,CAA+E;IAAvEC,EAAE,EAAC,QAAQ;IAACN,GAAG,EAAC,QAAQ;IAAEO,KAAK,EAAEC,KAAA,CAAAC,WAAW;IAAGC,MAAM,EAAEF,KAAA,CAAAG;cAFnEC,UAAA,GAGIP,mBAAA,CAAuH,SAAvHQ,UAAuH,cACvHR,mBAAA,CAA2H,SAA3HS,UAA2H,a","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}