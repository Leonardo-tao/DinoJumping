{"ast":null,"code":"export default {\n  name: 'playGame',\n  data() {\n    return {\n      ctx: null,\n      canvasWidth: 2400,\n      canvasHeight: 100,\n      speed: 1,\n      groundX: -10,\n      loadedImages: {},\n      // 存储加载后的图片\n      images: {\n        start: \"dino_start\",\n        ground: \"ground\"\n      }\n    };\n  },\n  methods: {\n    // 绘制图片\n    drawPic(pic, x, y, w, h) {\n      let img = this.loadedImages[pic]; // 使用已加载的图片\n\n      if (!img) return; // 如果图片尚未加载，直接返回\n\n      if (w === undefined) w = img.width;\n      if (h === undefined) h = img.height;\n      if (y === undefined) y = this.canvasHeight - h;\n      if (x === undefined) x = 0;\n      this.ctx.drawImage(img, x, y, w, h);\n    },\n    // 更新地面位置\n    updateGroundPosition() {\n      this.groundX -= this.speed;\n      if (this.groundX <= -this.canvasWidth) {\n        this.groundX = 0;\n      }\n      this.speed++;\n      console.log(this.groundX);\n    },\n    // 动画函数\n    animate() {\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n\n      // 绘制地面和小恐龙\n      this.drawPic('ground', this.groundX, this.canvasHeight - 26);\n      this.drawPic('ground', this.groundX + this.canvasWidth, this.canvasHeight - 26);\n      this.drawPic('start', 0, 40, 52, 52);\n      this.updateGroundPosition();\n      requestAnimationFrame(this.animate.bind(this));\n    }\n  },\n  mounted() {\n    this.ctx = document.getElementById('canvas').getContext(\"2d\");\n\n    // 预加载图片资源\n    const imagePromises = Object.entries(this.images).map(([key, imageSrc]) => {\n      return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.src = require(`/src/assets/images/${imageSrc}.png`);\n        img.onload = () => {\n          this.loadedImages[key] = img; // 存储已加载的图片\n          resolve();\n        };\n        img.onerror = () => {\n          console.error(`加载图片失败: ${img.src}`);\n          reject();\n        };\n      });\n    });\n\n    // 确保所有图片资源加载完成后再启动动画\n    Promise.all(imagePromises).then(() => {\n      this.animate(); // 所有图片加载完成后启动动画\n    }).catch(error => {\n      console.error(\"图片加载失败：\", error);\n    });\n  }\n};","map":{"version":3,"names":["name","data","ctx","canvasWidth","canvasHeight","speed","groundX","loadedImages","images","start","ground","methods","drawPic","pic","x","y","w","h","img","undefined","width","height","drawImage","updateGroundPosition","console","log","animate","clearRect","requestAnimationFrame","bind","mounted","document","getElementById","getContext","imagePromises","Object","entries","map","key","imageSrc","Promise","resolve","reject","Image","src","require","onload","onerror","error","all","then","catch"],"sources":["E:\\code\\Web\\dino\\src\\components\\game.vue"],"sourcesContent":["<template>\n  <div class=\"game\">\n    <canvas id=\"canvas\" :width=\"canvasWidth\" :height=\"canvasHeight\" />\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'playGame',\n  data() {\n    return {\n      ctx: null,\n      canvasWidth: 2400,\n      canvasHeight: 100,\n      speed: 1,\n      groundX: -10,\n      loadedImages: {}, // 存储加载后的图片\n      images: {\n        start: \"dino_start\",\n        ground: \"ground\"\n      }\n    }\n  },\n  methods: {\n    // 绘制图片\n    drawPic(pic, x, y, w, h) {\n      let img = this.loadedImages[pic]; // 使用已加载的图片\n\n      if (!img) return; // 如果图片尚未加载，直接返回\n\n      if (w === undefined) w = img.width;\n      if (h === undefined) h = img.height;\n      if (y === undefined) y = this.canvasHeight - h;\n      if (x === undefined) x = 0;\n\n      this.ctx.drawImage(img, x, y, w, h);\n    },\n    // 更新地面位置\n    updateGroundPosition() {\n      this.groundX -= this.speed;\n\n      if (this.groundX <= -this.canvasWidth) {\n        this.groundX = 0;\n      }\n\n      this.speed++\n      console.log(this.groundX)\n    },\n    // 动画函数\n    animate() {\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n\n      // 绘制地面和小恐龙\n      this.drawPic('ground', this.groundX, this.canvasHeight - 26);\n      this.drawPic('ground', this.groundX + this.canvasWidth, this.canvasHeight - 26)\n      this.drawPic('start', 0, 40, 52, 52);\n\n      this.updateGroundPosition();\n\n      requestAnimationFrame(this.animate.bind(this));\n    }\n  },\n\n  mounted() {\n    this.ctx = document.getElementById('canvas').getContext(\"2d\");\n\n    // 预加载图片资源\n    const imagePromises = Object.entries(this.images).map(([key, imageSrc]) => {\n      return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.src = require(`/src/assets/images/${imageSrc}.png`);\n\n        img.onload = () => {\n          this.loadedImages[key] = img; // 存储已加载的图片\n          resolve();\n        };\n\n        img.onerror = () => {\n          console.error(`加载图片失败: ${img.src}`);\n          reject();\n        };\n      });\n    });\n\n    // 确保所有图片资源加载完成后再启动动画\n    Promise.all(imagePromises)\n      .then(() => {\n        this.animate(); // 所有图片加载完成后启动动画\n      })\n      .catch(error => {\n        console.error(\"图片加载失败：\", error);\n      });\n  }\n};\n</script>\n\n<style scoped>\n#canvas {\n  background-color: #000;\n  border: 1px solid #000;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}