{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"game\"\n};\nconst _hoisted_2 = [\"width\", \"height\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"canvas\", {\n    id: \"canvas\",\n    width: $data.canvasWidth,\n    height: $data.canvasHeight\n  }, null, 8 /* PROPS */, _hoisted_2)]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","id","width","$data","canvasWidth","height","canvasHeight","_hoisted_2"],"sources":["E:\\code\\Web\\dino\\src\\components\\game.vue"],"sourcesContent":["<template>\n  <div class=\"game\">\n    <canvas id=\"canvas\" :width=\"canvasWidth\" :height=\"canvasHeight\" />\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'playGame',\n  data() {\n    return {\n      ctx: null,\n      canvasWidth: 2400,\n      canvasHeight: 100,\n      speed: 0,\n      groundX: -10,\n      isRunning: false,  // 标志是否开始移动\n      currentLeg: 'left', // 当前小恐龙腿的状态\n      legTimer: null,     // 控制左右脚切换的定时器\n      loadedImages: {}, // 存储加载后的图片\n      images: {\n        start: \"dino_start\",\n        ground: \"ground\",\n        left: \"dino_runl\",\n        right: \"dino_runr\"\n      }\n    }\n  },\n  methods: {\n    // 绘制图片\n    drawPic(pic, x, y, w, h) {\n      let img = this.loadedImages[pic] // 使用已加载的图片\n\n      if (!img) return // 如果图片尚未加载，直接返回\n\n      if (w === undefined) w = img.width\n      if (h === undefined) h = img.height\n      if (y === undefined) y = this.canvasHeight - h\n      if (x === undefined) x = 0\n\n      this.ctx.drawImage(img, x, y, w, h)\n    },\n    // 更新地面位置\n    updateGroundPosition() {\n      this.groundX -= this.speed\n\n      if (this.groundX <= -this.canvasWidth) {\n        this.groundX = 0\n      }\n\n    },\n    // 动画函数\n    animate() {\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight)\n\n      // 绘制地面和小恐龙\n      this.drawPic('ground', this.groundX, this.canvasHeight - 26)\n      this.drawPic('ground', this.groundX + this.canvasWidth, this.canvasHeight - 26)\n      this.drawPic(this.isRunning ? this.currentLeg : 'start', 100, 40, 52, 52)  // 根据跑步状态切换小恐龙图片\n\n      this.updateGroundPosition()\n\n      requestAnimationFrame(this.animate.bind(this))\n    },\n    handleKeyDown(e) {\n      if (e.key === 'Enter' && !this.isRunning) {\n        this.isRunning = true\n        this.speed = 1\n        this.startRunning() // 启动小恐龙跑步\n      }\n    },\n    accelerate() {\n      this.speed += 0.01\n    },\n    // 开始跑步，地面移动 + 小恐龙切换左右脚\n    startRunning() {\n      // 开始切换左右脚\n      this.legTimer = setInterval(() => {\n        this.currentLeg = this.currentLeg === 'left' ? 'right' : 'left'\n      }, 300) // 每300ms切换一次\n\n      // 地面开始移动\n      this.speed = 2 // 设置初始速度\n      this.accelerate() //设置\n    }\n  },\n\n  mounted() {\n    this.ctx = document.getElementById('canvas').getContext(\"2d\")\n\n    // 预加载图片资源\n    const imagePromises = Object.entries(this.images).map(([key, imageSrc]) => {\n      return new Promise((resolve, reject) => {\n        const img = new Image()\n        img.src = require(`/src/assets/images/${imageSrc}.png`)\n\n        img.onload = () => {\n          this.loadedImages[key] = img // 存储已加载的图片\n          resolve()\n        }\n\n        img.onerror = () => {\n          console.error(`加载图片失败: ${img.src}`)\n          reject()\n        }\n      })\n    })\n\n    // 监听键盘事件\n    window.addEventListener('keydown', this.handleKeyDown)\n\n    // 确保所有图片资源加载完成后再启动动画\n    Promise.all(imagePromises)\n      .then(() => {\n        this.animate() // 所有图片加载完成后启动动画\n      })\n      .catch(error => {\n        console.error(\"图片加载失败：\", error)\n      })\n  },\n  unmounted() {\n    if (this.legTimer) {\n      clearInterval(this.legTimer)\n    }\n    window.removeEventListener('keydown', this.handleKeyDown)\n  }\n\n}\n</script>\n\n<style scoped>\n#canvas {\n  background-color: #000;\n  border: 1px solid #000\n}\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAM;mBADnB;;uBACEC,mBAAA,CAEM,OAFNC,UAEM,GADJC,mBAAA,CAAkE;IAA1DC,EAAE,EAAC,QAAQ;IAAEC,KAAK,EAAEC,KAAA,CAAAC,WAAW;IAAGC,MAAM,EAAEF,KAAA,CAAAG;0BAFtDC,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}