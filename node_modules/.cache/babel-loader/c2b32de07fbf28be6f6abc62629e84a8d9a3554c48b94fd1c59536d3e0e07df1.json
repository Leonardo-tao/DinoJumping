{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'playGame',\n  data() {\n    return {\n      ctx: null,\n      canvasWidth: 1200,\n      canvasHeight: 170,\n      dinoX: 10,\n      dinoY: 0,\n      speed: 0,\n      // 画面移动速度\n      groundX: 0,\n      // 地面坐标\n      stage: 0,\n      // 游戏阶段\n      isRunning: false,\n      // 地面是否开始移动\n      isDied: false,\n      currentLeg: 'left',\n      // 当前小恐龙腿的状态\n      currentSwing: 'bird_up',\n      // 当前家雀翅膀的状态\n      legTimer: null,\n      // 控制左右脚切换的定时器\n      pace: 100,\n      // 步频\n      swing: 200,\n      // 扇翅膀\n      isJumping: false,\n      // 跳跃状态\n      isHanging: false,\n      // 悬空状态\n      jumpHeight: 0,\n      // 当前跳跃高度\n      maxHeight: 100,\n      // 最大跳跃高度\n      gravity: 5,\n      // 重力加速度\n      minGravity: 1,\n      // 最小重力加速度\n      gravityIndex: 1,\n      // 重力增长系数\n      barriers: [],\n      clouds: [],\n      birds: [],\n      barriers_list: [{\n        name: 'treeS',\n        width: 17,\n        height: 35\n      }, {\n        name: 'treeB',\n        width: 25,\n        height: 48\n      }, {\n        name: 'treeG',\n        width: 50,\n        height: 51\n      }],\n      lastBarrierX: 1200,\n      lastCloudX: 1200,\n      score: 0,\n      loadedImages: {},\n      // 存储加载后的图片\n      images: {\n        initial: \"initial\",\n        start: \"start\",\n        die: \"die\",\n        ground: \"ground\",\n        left: \"runl\",\n        right: \"runr\",\n        jump: \"start\",\n        bird_up: \"bird_up\",\n        bird_down: \"bird_down\",\n        // bird_up: \"111\", \n        // bird_down: \"222\",\n        treeS: \"treeS\",\n        treeB: \"treeB\",\n        treeG: \"treeG\",\n        over: \"endText\",\n        restart: \"restart\",\n        cloud: \"cloud\",\n        \"0\": \"0\",\n        \"1\": \"1\",\n        \"2\": \"2\",\n        \"3\": \"3\",\n        \"4\": \"4\",\n        \"5\": \"5\",\n        \"6\": \"6\",\n        \"7\": \"7\",\n        \"8\": \"8\",\n        \"9\": \"9\"\n      },\n      JUMP_STATE_NONE: 0,\n      JUMP_STATE_ASCENDING: 1,\n      JUMP_STATE_HANGING: 2,\n      JUMP_STATE_DESCENDING: 3,\n      jumpState: this.JUMP_STATE_NONE,\n      deltaTime: 0,\n      lastUpdateTime: 0,\n      jumpStartTime: 0\n    };\n  },\n  computed: {\n    groundW: function () {\n      return this.loadedImages['ground'].width;\n    },\n    groundH: function () {\n      return this.loadedImages['ground'].height;\n    },\n    dinoW: function () {\n      return this.loadedImages['initial'].width;\n    },\n    dinoH: function () {\n      return this.loadedImages['initial'].height;\n    },\n    groundY: function () {\n      return this.canvasHeight - this.loadedImages['ground'].height - this.dinoH;\n    },\n    treeY: function () {\n      return this.canvasHeight - this.loadedImages['ground'].height;\n    }\n  },\n  methods: {\n    // 绘制图片\n    drawPic(pic, x, y, w, h) {\n      let img = this.loadedImages[pic]; // 使用已加载的图片\n\n      if (!img) return; // 如果图片尚未加载，直接返回\n\n      if (w === undefined) w = img.width;\n      if (h === undefined) h = img.height;\n      if (y === undefined) y = this.groundY;\n      if (x === undefined) x = 0;\n      this.ctx.drawImage(img, x, y, w, h);\n    },\n    // 更新地面位置\n    updateGroundPosition() {\n      this.groundX -= this.speed;\n      if (this.groundX <= -this.canvasWidth) {\n        this.groundX = 0;\n      }\n    },\n    // 处理键盘函数\n    handleKeyDown(e) {\n      if (e.key === 'Enter' && !this.isRunning) {\n        this.isRunning = true;\n        this.speed = 2;\n        this.play(); // 启动动画\n      }\n      if (this.isRunning && e.key === ' ' && !this.isJumping) {\n        // 按下空格键\n        this.isJumping = true; // 标记为正在跳跃\n        this.jumpHeight = 0; // 重置跳跃高度\n        this.jumpState = this.JUMP_STATE_ASCENDING;\n        this.jumpStartTime = Date.now(); // 记录跳跃开始时间\n        this.lastUpdateTime = Date.now(); // 初始化最后更新时间\n      }\n    },\n    // 加速函数\n    accelerate() {\n      this.speed += 0.001;\n      this.pace -= 1;\n    },\n    updateJump() {\n      if (this.isJumping) {\n        if (this.jumpState === this.JUMP_STATE_ASCENDING) {\n          if (this.gravity >= this.minGravity) {\n            this.gravityIndex += (this.jumpHeight + 1) * 0.0001;\n            this.gravity -= (this.gravity - this.minGravity) * this.gravityIndex / (this.maxHeight / this.gravity);\n          }\n          this.jumpHeight += this.gravity;\n          if (this.jumpHeight >= this.maxHeight) {\n            this.jumpState = this.JUMP_STATE_HANGING;\n            this.jumpHeight = this.maxHeight;\n            this.hangingStartTime = Date.now(); // 记录滞空开始时间\n          }\n        } else if (this.jumpState === this.JUMP_STATE_HANGING) {\n          const hangingDuration = Date.now() - this.hangingStartTime;\n          if (hangingDuration > 110) {\n            // 假设滞空时间为110毫秒\n            this.jumpState = this.JUMP_STATE_DESCENDING;\n            this.gravity = -3; // 设置重力加速度为负值，表示向上\n          }\n        } else if (this.jumpState === this.JUMP_STATE_DESCENDING) {\n          this.jumpHeight += this.gravity;\n          if (this.jumpHeight <= 0) {\n            this.jumpHeight = 0;\n            this.isJumping = false;\n            this.jumpState = this.JUMP_STATE_NONE;\n            this.gravityIndex = 1.5;\n            this.gravity = 5; // 重置重力加速度为正值，表示向下\n          }\n        }\n      } else {\n        // 如果不在跳跃状态，重置跳跃状态\n        this.jumpState = this.JUMP_STATE_NONE;\n      }\n    },\n    initialize() {\n      // 绘制地面和小恐龙\n      if (!this.isDied) {\n        this.drawPic('ground', this.groundX, this.canvasHeight - this.groundH - 10);\n        this.drawPic('start', 10, this.groundY); // 根据跳跃状态调整y坐标\n        // 开始切换左右脚\n        this.legTimer = setInterval(() => {\n          this.currentLeg = this.currentLeg === 'left' ? 'right' : 'left';\n        }, this.pace);\n        this.swingTimer = setInterval(() => {\n          this.currentSwing = this.currentSwing === 'bird_up' ? 'bird_down' : 'bird_up';\n        }, this.swing);\n      }\n    },\n    // 开始跑步，地面移动 + 小恐龙切换左右脚\n    play() {\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n\n      // this.updateGame()\n      this.drawBarriers(); // 绘制障碍物\n      this.drawClouds(); // 绘制云\n      this.drawBirds(); // 绘制家雀\n      this.drawPic('ground', this.groundX, this.canvasHeight - this.groundH - 10); // 绘制地面\n      this.drawPic('ground', this.groundX + this.canvasWidth, this.canvasHeight - this.groundH - 10); // 绘制拼接地面\n      this.stage += 0.01;\n      const dinoY = this.isJumping ? this.groundY - this.jumpHeight : this.groundY;\n      this.dinoY = dinoY;\n      const dinoP = this.isDied ? 'die' : this.isJumping ? 'start' : this.currentLeg;\n      this.drawPic(dinoP, this.dinoX, dinoY); // 根据状态调整恐龙形态\n      if (this.isDied) {\n        this.drawPic('over', 470, 65);\n        this.drawPic('restart', 545, 90);\n        return;\n      }\n      this.deltaTime = Date.now() - this.lastUpdateTime;\n      this.lastUpdateTime = Date.now();\n\n      // 地面开始移动\n      this.updateGroundPosition(); // 地面移动\n      this.accelerate(); // 设置加速\n      this.updateJump(); // 更新跳跃\n      this.checkCrash(); // 检测碰撞\n\n      // 每隔一定时间生成家雀\n      if (this.stage >= 1 && this.birds.length === 0 || Math.random() < 0.01) {\n        // 设定生成概率\n        this.setBird();\n      }\n      // 每隔一定时间生成障碍物\n      if (this.barriers.length === 0 || Math.random() < 0.02) {\n        // 设定生成概率\n        this.setBarrier();\n      }\n      // 每隔一定时间生成云\n      if (this.clouds.length === 0 || Math.random() < 2) {\n        // 设定生成概率\n        this.setCloud();\n      }\n      this.score += 1;\n      console.log(Math.floor(this.score / 30));\n\n      // 请求下一帧动画\n      requestAnimationFrame(this.play.bind(this));\n    },\n    // 设置障碍物\n    setBarrier() {\n      const minGap = 300; // 障碍物的间隔\n      const maxGap = 800; // 障碍物的间隔\n      const x = this.lastBarrierX + Math.random() * (maxGap - minGap) + minGap; // 随机生成 x 坐标\n      const bar = this.barriers_list[Math.floor(Math.random() * this.barriers_list.length)];\n      const n = bar.name;\n      const w = bar.width;\n      const h = bar.height;\n      const y = this.treeY - h;\n      this.barriers.push({\n        n,\n        x,\n        y,\n        w,\n        h\n      }); // 将障碍物添加到数组中\n      this.lastBarrierX = x;\n    },\n    // 绘制障碍物\n    drawBarriers() {\n      this.barriers.forEach(barrier => {\n        this.drawPic(barrier.n, barrier.x, barrier.y, barrier.w, barrier.h);\n        barrier.x -= this.speed; // 更新障碍物位置\n      });\n      // 移除超出画布的障碍物\n      this.barriers = this.barriers.filter(barrier => barrier.x + 50 > 0);\n    },\n    // 设置家雀\n    setBird() {\n      const minGap = 300; // 家雀的间隔\n      const maxGap = 800; // 家雀的间隔\n      const x = this.lastBarrierX + Math.random() * (maxGap - minGap) + minGap; // 随机生成 x 坐标\n      const n = 'bird_up';\n      const w = this.loadedImages['bird_up'].width;\n      const h = this.loadedImages['bird_up'].height;\n      const y = 50;\n      this.birds.push({\n        n,\n        x,\n        y,\n        w,\n        h\n      }); // 将家雀添加到数组中\n      this.lastBarrierX = x;\n    },\n    // 绘制家雀\n    drawBirds() {\n      this.birds.forEach(bird => {\n        this.drawPic(this.currentSwing, bird.x, bird.y, bird.w, bird.h);\n        bird.x -= this.speed; // 更新家雀位置\n      });\n      // 移除超出画布的家雀\n      this.birds = this.birds.filter(bird => bird.x + 50 > 0);\n    },\n    // 设置云\n    setCloud() {\n      const minGap = 100;\n      const maxGap = 500;\n      const x = this.lastCloudX + Math.random() * (maxGap - minGap) + minGap; // 随机生成 x 坐标\n      const height = Math.random() * 70 + 10;\n      this.clouds.push({\n        x,\n        height\n      });\n      this.lastCloudX = x;\n    },\n    // 绘制云\n    drawClouds() {\n      this.clouds.forEach(cloud => {\n        this.drawPic('cloud', cloud.x, cloud.height);\n        cloud.x -= this.speed * 3 / 2;\n      });\n      // 移除超出画布的障碍物\n      this.clouds = this.clouds.filter(cloud => cloud.x + 50 > 0);\n    },\n    showScore() {\n      this.drawPic;\n    },\n    // 检测碰撞\n    checkCrash() {\n      this.barriers.forEach(barrier => {\n        // 恐龙的右边界超过障碍物的左边界 且 下边界未超过障碍物的上边界\n        if (this.dinoX + this.dinoW >= barrier.x && this.dinoY + this.dinoH >= barrier.y) {\n          this.gameOver();\n        }\n        // else this.score += 15\n      });\n      this.birds.forEach(bird => {\n        // 恐龙的右边界超过障碍物的左边界 且 下边界未超过障碍物的上边界\n        if (this.dinoX + this.dinoW >= bird.x && this.dinoY <= bird.y + bird.h) {\n          this.gameOver();\n        }\n        // else this.score += 15\n      });\n    },\n    gameOver() {\n      // 发生碰撞，执行相应的操作\n      console.log(\"碰撞发生！\");\n      this.isDied = true;\n      this.isRunning = false;\n      this.speed = 0;\n    },\n    resetGame() {\n      if (this.isDied) {\n        window.location.reload();\n      }\n    }\n  },\n  mounted() {\n    this.ctx = document.getElementById('canvas').getContext(\"2d\");\n    // 预加载图片资源\n    const imagePromises = Object.entries(this.images).map(([key, imageSrc]) => {\n      return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.src = require(`/src/assets/images/${imageSrc}.png`);\n        img.onload = () => {\n          this.loadedImages[key] = img; // 存储已加载的图片\n          resolve();\n        };\n        img.onerror = () => {\n          console.error(`加载图片失败: ${img.src}`);\n          reject();\n        };\n      });\n    });\n\n    // 确保所有图片资源加载完成后再启动动画\n    Promise.all(imagePromises).then(() => {\n      this.initialize(); // 初始化\n      window.addEventListener('keydown', this.handleKeyDown); // 监听键盘事件\n      document.getElementById('canvas').addEventListener('click', this.resetGame);\n    }).catch(error => {\n      console.error(\"图片加载失败：\", error);\n    });\n  },\n  unmounted() {\n    if (this.legTimer) {\n      clearInterval(this.legTimer);\n    }\n    if (this.swingTimer) {\n      clearInterval(this.swingTimer);\n    }\n    document.getElementById('canvas').removeEventListener('click', this.resetGame);\n    // window.removeEventListener('keydown', this.handleKeyDown)\n  }\n};","map":{"version":3,"names":["name","data","ctx","canvasWidth","canvasHeight","dinoX","dinoY","speed","groundX","stage","isRunning","isDied","currentLeg","currentSwing","legTimer","pace","swing","isJumping","isHanging","jumpHeight","maxHeight","gravity","minGravity","gravityIndex","barriers","clouds","birds","barriers_list","width","height","lastBarrierX","lastCloudX","score","loadedImages","images","initial","start","die","ground","left","right","jump","bird_up","bird_down","treeS","treeB","treeG","over","restart","cloud","JUMP_STATE_NONE","JUMP_STATE_ASCENDING","JUMP_STATE_HANGING","JUMP_STATE_DESCENDING","jumpState","deltaTime","lastUpdateTime","jumpStartTime","computed","groundW","groundH","dinoW","dinoH","groundY","treeY","methods","drawPic","pic","x","y","w","h","img","undefined","drawImage","updateGroundPosition","handleKeyDown","e","key","play","Date","now","accelerate","updateJump","hangingStartTime","hangingDuration","initialize","setInterval","swingTimer","clearRect","drawBarriers","drawClouds","drawBirds","dinoP","checkCrash","length","Math","random","setBird","setBarrier","setCloud","console","log","floor","requestAnimationFrame","bind","minGap","maxGap","bar","n","push","forEach","barrier","filter","bird","showScore","gameOver","resetGame","window","location","reload","mounted","document","getElementById","getContext","imagePromises","Object","entries","map","imageSrc","Promise","resolve","reject","Image","src","require","onload","onerror","error","all","then","addEventListener","catch","unmounted","clearInterval","removeEventListener"],"sources":["E:\\code\\Web\\dino\\src\\components\\game.vue"],"sourcesContent":["<template>\n  <div class=\"game\">\n    <canvas id=\"canvas\" :width=\"canvasWidth\" :height=\"canvasHeight\" />\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'playGame',\n  data() {\n    return {\n      ctx: null,\n      canvasWidth: 1200,\n      canvasHeight: 170,\n      dinoX: 10,\n      dinoY: 0,\n      speed: 0,                   // 画面移动速度\n      groundX: 0,                 // 地面坐标\n      stage: 0,                   // 游戏阶段\n      isRunning: false,           // 地面是否开始移动\n      isDied: false,\n      currentLeg: 'left',         // 当前小恐龙腿的状态\n      currentSwing: 'bird_up',    // 当前家雀翅膀的状态\n      legTimer: null,             // 控制左右脚切换的定时器\n      pace: 100,                  // 步频\n      swing: 200,                 // 扇翅膀\n      isJumping: false,           // 跳跃状态\n      isHanging: false,           // 悬空状态\n      jumpHeight: 0,              // 当前跳跃高度\n      maxHeight: 100,             // 最大跳跃高度\n      gravity: 5,                 // 重力加速度\n      minGravity: 1,              // 最小重力加速度\n      gravityIndex: 1,            // 重力增长系数\n      barriers: [],\n      clouds: [],\n      birds: [],\n      barriers_list: [\n        {\n          name: 'treeS',\n          width: 17,\n          height: 35\n        },\n        {\n          name: 'treeB',\n          width: 25,\n          height: 48\n        },\n        {\n          name: 'treeG',\n          width: 50,\n          height: 51\n        }\n      ],\n      lastBarrierX: 1200,\n      lastCloudX: 1200,\n      score: 0,\n      loadedImages: {},           // 存储加载后的图片\n      images: {\n        initial: \"initial\",\n        start: \"start\",\n        die: \"die\",\n        ground: \"ground\",\n        left: \"runl\",\n        right: \"runr\",\n        jump: \"start\",\n        bird_up: \"bird_up\", \n        bird_down: \"bird_down\",\n        // bird_up: \"111\", \n        // bird_down: \"222\",\n        treeS: \"treeS\",\n        treeB: \"treeB\",\n        treeG: \"treeG\",\n        over: \"endText\",\n        restart: \"restart\",\n        cloud: \"cloud\",\n        \"0\":\"0\",\n        \"1\":\"1\",\n        \"2\":\"2\",\n        \"3\":\"3\",\n        \"4\":\"4\",\n        \"5\":\"5\",\n        \"6\":\"6\",\n        \"7\":\"7\",\n        \"8\":\"8\",\n        \"9\":\"9\"\n      },\n      JUMP_STATE_NONE: 0,\n      JUMP_STATE_ASCENDING: 1,\n      JUMP_STATE_HANGING: 2,\n      JUMP_STATE_DESCENDING: 3,\n      jumpState: this.JUMP_STATE_NONE,\n      deltaTime: 0,\n      lastUpdateTime: 0,\n      jumpStartTime: 0,\n    }\n  },\n  computed: {\n    groundW: function() {return this.loadedImages['ground'].width},\n    groundH: function() {return this.loadedImages['ground'].height},\n    dinoW: function() {return this.loadedImages['initial'].width},\n    dinoH: function() {return this.loadedImages['initial'].height},\n    groundY: function() {return this.canvasHeight - this.loadedImages['ground'].height - this.dinoH},\n    treeY: function() {\n      return this.canvasHeight - this.loadedImages['ground'].height\n    }\n  },\n  methods: {\n    // 绘制图片\n    drawPic(pic, x, y, w, h) {\n      let img = this.loadedImages[pic] // 使用已加载的图片\n\n      if (!img) return // 如果图片尚未加载，直接返回\n\n      if (w === undefined) w = img.width\n      if (h === undefined) h = img.height\n      if (y === undefined) y = this.groundY\n      if (x === undefined) x = 0\n\n      this.ctx.drawImage(img, x, y, w, h)\n    },\n    // 更新地面位置\n    updateGroundPosition() {\n      this.groundX -= this.speed\n\n      if (this.groundX <= -this.canvasWidth) {\n        this.groundX = 0\n      }\n    },\n    // 处理键盘函数\n    handleKeyDown(e) {\n      if (e.key === 'Enter' && !this.isRunning) {\n        this.isRunning = true\n        this.speed = 2\n        this.play() // 启动动画\n      }\n\n      if (this.isRunning && e.key === ' ' && !this.isJumping) { // 按下空格键\n        this.isJumping = true // 标记为正在跳跃\n        this.jumpHeight = 0 // 重置跳跃高度\n        this.jumpState = this.JUMP_STATE_ASCENDING\n        this.jumpStartTime = Date.now() // 记录跳跃开始时间\n        this.lastUpdateTime = Date.now() // 初始化最后更新时间\n      }\n    },\n    // 加速函数\n    accelerate() {\n      this.speed += 0.001\n      this.pace -= 1\n    },\n    updateJump() {\n      if (this.isJumping) {\n        if (this.jumpState === this.JUMP_STATE_ASCENDING) {\n          if(this.gravity >= this.minGravity){\n            this.gravityIndex += ( this.jumpHeight + 1) * 0.0001\n            this.gravity -= ( this.gravity - this.minGravity ) * this.gravityIndex / (( this.maxHeight / this.gravity ))\n          }\n          this.jumpHeight += this.gravity;\n          if (this.jumpHeight >= this.maxHeight) {\n            this.jumpState = this.JUMP_STATE_HANGING;\n            this.jumpHeight = this.maxHeight;\n            this.hangingStartTime = Date.now(); // 记录滞空开始时间\n          }\n        } else if (this.jumpState === this.JUMP_STATE_HANGING) {\n          const hangingDuration = Date.now() - this.hangingStartTime;\n          if (hangingDuration > 110) { // 假设滞空时间为110毫秒\n            this.jumpState = this.JUMP_STATE_DESCENDING;\n            this.gravity = -3; // 设置重力加速度为负值，表示向上\n          }\n        } else if (this.jumpState === this.JUMP_STATE_DESCENDING) {\n          this.jumpHeight += this.gravity\n          if (this.jumpHeight <= 0) {\n            this.jumpHeight = 0;\n            this.isJumping = false;\n            this.jumpState = this.JUMP_STATE_NONE;\n            this.gravityIndex = 1.5\n            this.gravity = 5; // 重置重力加速度为正值，表示向下\n          }\n        }\n      } else {\n        // 如果不在跳跃状态，重置跳跃状态\n        this.jumpState = this.JUMP_STATE_NONE;\n      }\n    },\n    initialize() {\n      // 绘制地面和小恐龙\n      if(!this.isDied){\n        this.drawPic('ground', this.groundX, this.canvasHeight - this.groundH - 10)\n        this.drawPic('start', 10, this.groundY)  // 根据跳跃状态调整y坐标\n        // 开始切换左右脚\n        this.legTimer = setInterval(() => {\n          this.currentLeg = this.currentLeg === 'left' ? 'right' : 'left'\n        }, this.pace)\n        this.swingTimer = setInterval(() => {\n          this.currentSwing = this.currentSwing === 'bird_up' ? 'bird_down' : 'bird_up'\n        }, this.swing)\n      }\n    },\n    // 开始跑步，地面移动 + 小恐龙切换左右脚\n    play() {\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight)\n      \n      // this.updateGame()\n      this.drawBarriers()             // 绘制障碍物\n      this.drawClouds()               // 绘制云\n      this.drawBirds()                // 绘制家雀\n      this.drawPic('ground', this.groundX, this.canvasHeight - this.groundH - 10)         // 绘制地面\n      this.drawPic('ground', this.groundX + this.canvasWidth, this.canvasHeight - this.groundH - 10)    // 绘制拼接地面\n      this.stage += 0.01\n\n      const dinoY = this.isJumping ? (this.groundY - this.jumpHeight) : this.groundY\n      this.dinoY = dinoY\n      const dinoP = this.isDied ? 'die' : this.isJumping ? 'start' : this.currentLeg\n      this.drawPic(dinoP, this.dinoX, dinoY)  // 根据状态调整恐龙形态\n      if(this.isDied){\n        this.drawPic('over', 470, 65)\n        this.drawPic('restart',545, 90)\n        return\n      }\n      \n      this.deltaTime = Date.now() - this.lastUpdateTime\n      this.lastUpdateTime = Date.now()\n\n      // 地面开始移动\n      this.updateGroundPosition() // 地面移动\n      this.accelerate() // 设置加速\n      this.updateJump() // 更新跳跃\n      this.checkCrash() // 检测碰撞\n\n      // 每隔一定时间生成家雀\n      if (this.stage >= 1 && this.birds.length === 0 || Math.random() < 0.01) { // 设定生成概率\n        this.setBird()\n      }\n      // 每隔一定时间生成障碍物\n      if (this.barriers.length === 0 || Math.random() < 0.02) { // 设定生成概率\n        this.setBarrier()\n      }\n      // 每隔一定时间生成云\n      if (this.clouds.length === 0 || Math.random() < 2) { // 设定生成概率\n        this.setCloud()\n      }\n      this.score += 1\n      console.log(Math.floor(this.score / 30))\n\n      // 请求下一帧动画\n      requestAnimationFrame(this.play.bind(this))\n    },\n    // 设置障碍物\n    setBarrier() {\n      const minGap = 300 // 障碍物的间隔\n      const maxGap = 800 // 障碍物的间隔\n      const x = this.lastBarrierX + Math.random() * (maxGap - minGap) + minGap // 随机生成 x 坐标\n      const bar = this.barriers_list[Math.floor(Math.random() * this.barriers_list.length)]\n      const n = bar.name\n      const w = bar.width\n      const h = bar.height\n      const y = this.treeY - h\n      this.barriers.push({ n, x, y, w, h }) // 将障碍物添加到数组中\n      this.lastBarrierX = x\n    },\n    // 绘制障碍物\n    drawBarriers() {\n      this.barriers.forEach(barrier => {\n        this.drawPic(barrier.n, barrier.x, barrier.y, barrier.w, barrier.h)\n        barrier.x -= this.speed // 更新障碍物位置\n      })\n      // 移除超出画布的障碍物\n      this.barriers = this.barriers.filter(barrier => barrier.x + 50 > 0)\n    },\n    // 设置家雀\n    setBird() {\n      const minGap = 300 // 家雀的间隔\n      const maxGap = 800 // 家雀的间隔\n      const x = this.lastBarrierX + Math.random() * (maxGap - minGap) + minGap // 随机生成 x 坐标\n      const n = 'bird_up'\n      const w = this.loadedImages['bird_up'].width\n      const h = this.loadedImages['bird_up'].height\n      const y = 50\n      this.birds.push({ n, x, y, w, h }) // 将家雀添加到数组中\n      this.lastBarrierX = x\n    },\n    // 绘制家雀\n    drawBirds() {\n      this.birds.forEach(bird => {\n        this.drawPic(this.currentSwing, bird.x, bird.y, bird.w, bird.h)\n        bird.x -= this.speed // 更新家雀位置\n      })\n      // 移除超出画布的家雀\n      this.birds = this.birds.filter(bird => bird.x + 50 > 0)\n    },\n    // 设置云\n    setCloud() {\n      const minGap = 100 \n      const maxGap = 500 \n      const x = this.lastCloudX + Math.random() * (maxGap - minGap) + minGap // 随机生成 x 坐标\n      const height = Math.random() * 70 + 10\n      this.clouds.push({ x, height })\n      this.lastCloudX = x\n    },\n    // 绘制云\n    drawClouds() {\n      this.clouds.forEach(cloud => {\n        this.drawPic('cloud', cloud.x, cloud.height)\n        cloud.x -= this.speed * 3 / 2\n      })\n      // 移除超出画布的障碍物\n      this.clouds = this.clouds.filter(cloud => cloud.x + 50 > 0)\n    },\n    showScore() {\n      this.drawPic\n    },\n    // 检测碰撞\n    checkCrash() {\n      this.barriers.forEach(barrier => {\n        // 恐龙的右边界超过障碍物的左边界 且 下边界未超过障碍物的上边界\n        if (this.dinoX + this.dinoW >= barrier.x && \n            this.dinoY + this.dinoH >= barrier.y ) {\n          this.gameOver()\n        }\n        // else this.score += 15\n      })\n      this.birds.forEach(bird => {\n        // 恐龙的右边界超过障碍物的左边界 且 下边界未超过障碍物的上边界\n        if (this.dinoX + this.dinoW >= bird.x && \n            this.dinoY <= bird.y + bird.h) {\n          this.gameOver()\n        }\n        // else this.score += 15\n      })\n    },\n    gameOver() {\n      // 发生碰撞，执行相应的操作\n      console.log(\"碰撞发生！\")\n      this.isDied = true\n      this.isRunning = false\n      this.speed = 0\n\n    },\n    resetGame() {\n      if(this.isDied){\n        window.location.reload()\n      }\n    }\n  },\n  mounted() {\n    this.ctx = document.getElementById('canvas').getContext(\"2d\")\n    // 预加载图片资源\n    const imagePromises = Object.entries(this.images).map(([key, imageSrc]) => {\n      return new Promise((resolve, reject) => {\n        const img = new Image()\n        img.src = require(`/src/assets/images/${imageSrc}.png`)\n\n        img.onload = () => {\n          this.loadedImages[key] = img // 存储已加载的图片\n          resolve()\n        }\n\n        img.onerror = () => {\n          console.error(`加载图片失败: ${img.src}`)\n          reject()\n        }\n      })\n    })\n    \n    // 确保所有图片资源加载完成后再启动动画\n    Promise.all(imagePromises)\n    .then(() => {\n        this.initialize()       // 初始化\n        window.addEventListener('keydown', this.handleKeyDown)  // 监听键盘事件\n        document.getElementById('canvas').addEventListener('click', this.resetGame)\n      })\n      .catch(error => {\n        console.error(\"图片加载失败：\", error)\n      })\n  },\n  unmounted() {\n    if (this.legTimer) {\n      clearInterval(this.legTimer)\n    }\n    if (this.swingTimer) {\n      clearInterval(this.swingTimer)\n    }\n    document.getElementById('canvas').removeEventListener('click', this.resetGame)\n    // window.removeEventListener('keydown', this.handleKeyDown)\n  }\n\n}\n</script>\n\n<style scoped>\n  #canvas {\n    background-color: #fff;\n  }\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}