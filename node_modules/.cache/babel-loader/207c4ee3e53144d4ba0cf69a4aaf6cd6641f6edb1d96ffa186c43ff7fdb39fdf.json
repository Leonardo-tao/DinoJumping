{"ast":null,"code":"export default {\n  name: 'playGame',\n  data() {\n    return {\n      ctx: null,\n      canvasWidth: 2400,\n      canvasHeight: 100,\n      speed: 1,\n      groundX: -10,\n      isRunning: false,\n      // 标志是否开始移动\n      currentLeg: 'left',\n      // 当前小恐龙腿的状态\n      legTimer: null,\n      // 控制左右脚切换的定时器\n      loadedImages: {},\n      // 存储加载后的图片\n      images: {\n        start: \"dino_start\",\n        ground: \"ground\"\n      }\n    };\n  },\n  methods: {\n    // 绘制图片\n    drawPic(pic, x, y, w, h) {\n      let img = this.loadedImages[pic]; // 使用已加载的图片\n\n      if (!img) return; // 如果图片尚未加载，直接返回\n\n      if (w === undefined) w = img.width;\n      if (h === undefined) h = img.height;\n      if (y === undefined) y = this.canvasHeight - h;\n      if (x === undefined) x = 0;\n      this.ctx.drawImage(img, x, y, w, h);\n    },\n    // 更新地面位置\n    updateGroundPosition() {\n      this.groundX -= this.speed;\n      if (this.groundX <= -this.canvasWidth) {\n        this.groundX = 0;\n      }\n      this.speed += 0.001;\n      console.log(this.groundX);\n    },\n    // 动画函数\n    animate() {\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n\n      // 绘制地面和小恐龙\n      this.drawPic('ground', this.groundX, this.canvasHeight - 26);\n      this.drawPic('ground', this.groundX + this.canvasWidth, this.canvasHeight - 26);\n      this.drawPic(this.isRunning ? this.currentLeg : 'start', 100, 40, 52, 52); // 根据跑步状态切换小恐龙图片\n\n      this.updateGroundPosition();\n      requestAnimationFrame(this.animate.bind(this));\n    },\n    handleKeyDown(e) {\n      if (e.key === 'Enter' && !this.isRunning) {\n        this.isRunning = true;\n        this.startRunning(); // 启动小恐龙跑步\n      }\n    },\n    // 开始跑步，地面移动 + 小恐龙切换左右脚\n    startRunning() {\n      // 开始切换左右脚\n      this.legTimer = setInterval(() => {\n        this.currentLeg = this.currentLeg === 'left' ? 'right' : 'left';\n      }, 500); // 每500ms切换一次\n\n      // 地面开始移动\n      this.speed = 2; // 设置初始速度\n    }\n  },\n  mounted() {\n    this.ctx = document.getElementById('canvas').getContext(\"2d\");\n\n    // 预加载图片资源\n    const imagePromises = Object.entries(this.images).map(([key, imageSrc]) => {\n      return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.src = require(`/src/assets/images/${imageSrc}.png`);\n        img.onload = () => {\n          this.loadedImages[key] = img; // 存储已加载的图片\n          resolve();\n        };\n        img.onerror = () => {\n          console.error(`加载图片失败: ${img.src}`);\n          reject();\n        };\n      });\n    });\n\n    // 监听键盘事件\n    window.addEventListener('keydown', this.handleKeyDown);\n\n    // 确保所有图片资源加载完成后再启动动画\n    Promise.all(imagePromises).then(() => {\n      this.animate(); // 所有图片加载完成后启动动画\n    }).catch(error => {\n      console.error(\"图片加载失败：\", error);\n    });\n  },\n  unmounted() {\n    if (this.legTimer) {\n      clearInterval(this.legTimer);\n    }\n    window.removeEventListener('keydown', this.handleKeyDown);\n  }\n};","map":{"version":3,"names":["name","data","ctx","canvasWidth","canvasHeight","speed","groundX","isRunning","currentLeg","legTimer","loadedImages","images","start","ground","methods","drawPic","pic","x","y","w","h","img","undefined","width","height","drawImage","updateGroundPosition","console","log","animate","clearRect","requestAnimationFrame","bind","handleKeyDown","e","key","startRunning","setInterval","mounted","document","getElementById","getContext","imagePromises","Object","entries","map","imageSrc","Promise","resolve","reject","Image","src","require","onload","onerror","error","window","addEventListener","all","then","catch","unmounted","clearInterval","removeEventListener"],"sources":["E:\\code\\Web\\dino\\src\\components\\game.vue"],"sourcesContent":["<template>\n  <div class=\"game\">\n    <canvas id=\"canvas\" :width=\"canvasWidth\" :height=\"canvasHeight\" />\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'playGame',\n  data() {\n    return {\n      ctx: null,\n      canvasWidth: 2400,\n      canvasHeight: 100,\n      speed: 1,\n      groundX: -10,\n      isRunning: false,  // 标志是否开始移动\n      currentLeg: 'left', // 当前小恐龙腿的状态\n      legTimer: null,     // 控制左右脚切换的定时器\n      loadedImages: {}, // 存储加载后的图片\n      images: {\n        start: \"dino_start\",\n        ground: \"ground\"\n      }\n    }\n  },\n  methods: {\n    // 绘制图片\n    drawPic(pic, x, y, w, h) {\n      let img = this.loadedImages[pic] // 使用已加载的图片\n\n      if (!img) return // 如果图片尚未加载，直接返回\n\n      if (w === undefined) w = img.width\n      if (h === undefined) h = img.height\n      if (y === undefined) y = this.canvasHeight - h\n      if (x === undefined) x = 0\n\n      this.ctx.drawImage(img, x, y, w, h)\n    },\n    // 更新地面位置\n    updateGroundPosition() {\n      this.groundX -= this.speed\n\n      if (this.groundX <= -this.canvasWidth) {\n        this.groundX = 0\n      }\n\n      this.speed += 0.001\n      console.log(this.groundX)\n    },\n    // 动画函数\n    animate() {\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight)\n\n      // 绘制地面和小恐龙\n      this.drawPic('ground', this.groundX, this.canvasHeight - 26)\n      this.drawPic('ground', this.groundX + this.canvasWidth, this.canvasHeight - 26)\n      this.drawPic(this.isRunning ? this.currentLeg : 'start', 100, 40, 52, 52)  // 根据跑步状态切换小恐龙图片\n\n      this.updateGroundPosition()\n\n      requestAnimationFrame(this.animate.bind(this))\n    },\n    handleKeyDown(e) {\n      if (e.key === 'Enter' && !this.isRunning) {\n        this.isRunning = true\n        this.startRunning() // 启动小恐龙跑步\n      }\n    },\n\n    // 开始跑步，地面移动 + 小恐龙切换左右脚\n    startRunning() {\n      // 开始切换左右脚\n      this.legTimer = setInterval(() => {\n        this.currentLeg = this.currentLeg === 'left' ? 'right' : 'left'\n      }, 500) // 每500ms切换一次\n\n      // 地面开始移动\n      this.speed = 2 // 设置初始速度\n    }\n  },\n\n  mounted() {\n    this.ctx = document.getElementById('canvas').getContext(\"2d\")\n\n    // 预加载图片资源\n    const imagePromises = Object.entries(this.images).map(([key, imageSrc]) => {\n      return new Promise((resolve, reject) => {\n        const img = new Image()\n        img.src = require(`/src/assets/images/${imageSrc}.png`)\n\n        img.onload = () => {\n          this.loadedImages[key] = img // 存储已加载的图片\n          resolve()\n        }\n\n        img.onerror = () => {\n          console.error(`加载图片失败: ${img.src}`)\n          reject()\n        }\n      })\n    })\n\n    // 监听键盘事件\n    window.addEventListener('keydown', this.handleKeyDown)\n\n    // 确保所有图片资源加载完成后再启动动画\n    Promise.all(imagePromises)\n      .then(() => {\n        this.animate() // 所有图片加载完成后启动动画\n      })\n      .catch(error => {\n        console.error(\"图片加载失败：\", error)\n      })\n  },\n  unmounted() {\n    if (this.legTimer) {\n      clearInterval(this.legTimer)\n    }\n    window.removeEventListener('keydown', this.handleKeyDown)\n  }\n\n}\n</script>\n\n<style scoped>\n#canvas {\n  background-color: #000,\n  border: 1px solid #000\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}