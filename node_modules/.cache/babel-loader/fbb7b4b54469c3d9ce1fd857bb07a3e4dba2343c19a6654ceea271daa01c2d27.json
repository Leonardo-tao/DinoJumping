{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"game\"\n};\nconst _hoisted_2 = [\"width\", \"height\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"canvas\", {\n    id: \"canvas\",\n    width: $data.canvasWidth,\n    height: $data.canvasHeight\n  }, null, 8 /* PROPS */, _hoisted_2)]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","id","width","$data","canvasWidth","height","canvasHeight","_hoisted_2"],"sources":["E:\\code\\Web\\dino\\src\\components\\game.vue"],"sourcesContent":["<template>\n  <div class=\"game\">\n    <canvas id=\"canvas\" :width=\"canvasWidth\" :height=\"canvasHeight\" />\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'playGame',\n  data() {\n    return {\n      ctx: null,\n      canvasWidth: 1200,\n      canvasHeight: 170,\n      dinoX: 10,\n      dinoY: 0,\n      speed: 0,                   // 画面移动速度\n      groundX: 0,                 // 地面坐标\n      stage: 0,                   // 游戏阶段\n      isRunning: false,           // 地面是否开始移动\n      isDied: false,\n      currentLeg: 'left',         // 当前小恐龙腿的状态\n      currentSwing: 'bird_up',    // 当前家雀翅膀的状态\n      legTimer: null,             // 控制左右脚切换的定时器\n      pace: 100,                  // 步频\n      swing: 200,                 // 扇翅膀\n      isJumping: false,           // 跳跃状态\n      isHanging: false,           // 悬空状态\n      jumpHeight: 0,              // 当前跳跃高度\n      maxHeight: 100,             // 最大跳跃高度\n      gravity: 5,                 // 重力加速度\n      minGravity: 1,              // 最小重力加速度\n      gravityIndex: 1,            // 重力增长系数\n      barriers: [],\n      clouds: [],\n      birds: [],\n      barriers_list: [\n        {\n          name: 'treeS',\n          width: 17,\n          height: 35\n        },\n        {\n          name: 'treeB',\n          width: 25,\n          height: 48\n        },\n        {\n          name: 'treeG',\n          width: 50,\n          height: 51\n        }\n      ],\n      lastBarrierX: 1200,\n      lastCloudX: 1200,\n      scores: [0, 0, 0, 0, 0, 0],\n      score: 0,\n      loadedImages: {},           // 存储加载后的图片\n      images: {\n        initial: \"initial\",\n        start: \"start\",\n        die: \"die\",\n        ground: \"ground\",\n        left: \"runl\",\n        right: \"runr\",\n        jump: \"start\",\n        bird_up: \"bird_up\", \n        bird_down: \"bird_down\",\n        // bird_up: \"111\", \n        // bird_down: \"222\",\n        treeS: \"treeS\",\n        treeB: \"treeB\",\n        treeG: \"treeG\",\n        over: \"endText\",\n        restart: \"restart\",\n        cloud: \"cloud\",\n        \"0\":\"0\",\n        \"1\":\"1\",\n        \"2\":\"2\",\n        \"3\":\"3\",\n        \"4\":\"4\",\n        \"5\":\"5\",\n        \"6\":\"6\",\n        \"7\":\"7\",\n        \"8\":\"8\",\n        \"9\":\"9\"\n      },\n      JUMP_STATE_NONE: 0,\n      JUMP_STATE_ASCENDING: 1,\n      JUMP_STATE_HANGING: 2,\n      JUMP_STATE_DESCENDING: 3,\n      jumpState: this.JUMP_STATE_NONE,\n      deltaTime: 0,\n      lastUpdateTime: 0,\n      jumpStartTime: 0,\n    }\n  },\n  computed: {\n    groundW: function() {return this.loadedImages['ground'].width},\n    groundH: function() {return this.loadedImages['ground'].height},\n    dinoW: function() {return this.loadedImages['initial'].width},\n    dinoH: function() {return this.loadedImages['initial'].height},\n    groundY: function() {return this.canvasHeight - this.loadedImages['ground'].height - this.dinoH},\n    treeY: function() {\n      return this.canvasHeight - this.loadedImages['ground'].height\n    }\n  },\n  methods: {\n    // 绘制图片\n    drawPic(pic, x, y, w, h) {\n      let img = this.loadedImages[pic] // 使用已加载的图片\n\n      if (!img) return // 如果图片尚未加载，直接返回\n\n      if (w === undefined) w = img.width\n      if (h === undefined) h = img.height\n      if (y === undefined) y = this.groundY\n      if (x === undefined) x = 0\n\n      this.ctx.drawImage(img, x, y, w, h)\n    },\n    // 更新地面位置\n    updateGroundPosition() {\n      this.groundX -= this.speed\n\n      if (this.groundX <= -this.canvasWidth) {\n        this.groundX = 0\n      }\n    },\n    // 处理键盘函数\n    handleKeyDown(e) {\n      if (e.key === 'Enter' && !this.isRunning) {\n        this.isRunning = true\n        this.speed = 2\n        this.play() // 启动动画\n        setInterval(this.updateScore, 100)\n      }\n\n      if (this.isRunning && e.key === ' ' && !this.isJumping) { // 按下空格键\n        this.isJumping = true // 标记为正在跳跃\n        this.jumpHeight = 0 // 重置跳跃高度\n        this.jumpState = this.JUMP_STATE_ASCENDING\n        this.jumpStartTime = Date.now() // 记录跳跃开始时间\n        this.lastUpdateTime = Date.now() // 初始化最后更新时间\n      }\n    },\n    // 加速函数\n    accelerate() {\n      this.speed += 0.001\n      this.pace -= 1\n    },\n    updateJump() {\n      if (this.isJumping) {\n        if (this.jumpState === this.JUMP_STATE_ASCENDING) {\n          if(this.gravity >= this.minGravity){\n            this.gravityIndex += ( this.jumpHeight + 1) * 0.0001\n            this.gravity -= ( this.gravity - this.minGravity ) * this.gravityIndex / (( this.maxHeight / this.gravity ))\n          }\n          this.jumpHeight += this.gravity;\n          if (this.jumpHeight >= this.maxHeight) {\n            this.jumpState = this.JUMP_STATE_HANGING;\n            this.jumpHeight = this.maxHeight;\n            this.hangingStartTime = Date.now(); // 记录滞空开始时间\n          }\n        } else if (this.jumpState === this.JUMP_STATE_HANGING) {\n          const hangingDuration = Date.now() - this.hangingStartTime;\n          if (hangingDuration > 110) { // 假设滞空时间为110毫秒\n            this.jumpState = this.JUMP_STATE_DESCENDING;\n            this.gravity = -3; // 设置重力加速度为负值，表示向上\n          }\n        } else if (this.jumpState === this.JUMP_STATE_DESCENDING) {\n          this.jumpHeight += this.gravity\n          if (this.jumpHeight <= 0) {\n            this.jumpHeight = 0;\n            this.isJumping = false;\n            this.jumpState = this.JUMP_STATE_NONE;\n            this.gravityIndex = 1.5\n            this.gravity = 5; // 重置重力加速度为正值，表示向下\n          }\n        }\n      } else {\n        // 如果不在跳跃状态，重置跳跃状态\n        this.jumpState = this.JUMP_STATE_NONE;\n      }\n    },\n    initialize() {\n      // 绘制地面和小恐龙\n      if(!this.isDied){\n        this.drawPic('ground', this.groundX, this.canvasHeight - this.groundH - 10)\n        this.drawPic('start', 10, this.groundY)  // 根据跳跃状态调整y坐标\n        // 开始切换左右脚\n        this.legTimer = setInterval(() => {\n          this.currentLeg = this.currentLeg === 'left' ? 'right' : 'left'\n        }, this.pace)\n        this.swingTimer = setInterval(() => {\n          this.currentSwing = this.currentSwing === 'bird_up' ? 'bird_down' : 'bird_up'\n        }, this.swing)\n      }\n    },\n    // 开始跑步，地面移动 + 小恐龙切换左右脚\n    play() {\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight)\n      \n      // this.updateGame()\n      this.drawBarriers()             // 绘制障碍物\n      this.drawClouds()               // 绘制云\n      this.drawBirds()                // 绘制家雀\n      this.drawPic('ground', this.groundX, this.canvasHeight - this.groundH - 10)         // 绘制地面\n      this.drawPic('ground', this.groundX + this.canvasWidth, this.canvasHeight - this.groundH - 10)    // 绘制拼接地面\n      this.stage += 0.01\n\n      const dinoY = this.isJumping ? (this.groundY - this.jumpHeight) : this.groundY\n      this.dinoY = dinoY\n      const dinoP = this.isDied ? 'die' : this.isJumping ? 'start' : this.currentLeg\n      this.drawPic(dinoP, this.dinoX, dinoY)  // 根据状态调整恐龙形态\n      \n      this.deltaTime = Date.now() - this.lastUpdateTime\n      this.lastUpdateTime = Date.now()\n\n      // 地面开始移动\n      this.updateGroundPosition() // 地面移动\n      this.accelerate() // 设置加速\n      this.updateJump() // 更新跳跃\n      this.checkCrash() // 检测碰撞\n\n      // 每隔一定时间生成家雀\n      if (this.stage >= 1 && this.birds.length === 0 || Math.random() < 0.01) { // 设定生成概率\n        this.setBird()\n      }\n      // 每隔一定时间生成障碍物\n      if (this.barriers.length === 0 || Math.random() < 0.02) { // 设定生成概率\n        this.setBarrier()\n      }\n      // 每隔一定时间生成云\n      if (this.clouds.length === 0 || Math.random() < 2) { // 设定生成概率\n        this.setCloud()\n      }\n      let tap = 15\n      for(let i = 0 ; i < 6 ; i++){\n        this.drawPic(`${this.scores[i]}`, 1000 + tap * i, 20)\n      }\n      \n      if(this.isDied){\n        this.drawPic('over', 470, 65)\n        this.drawPic('restart',545, 90)\n        return\n      }\n\n      // 请求下一帧动画\n      requestAnimationFrame(this.play.bind(this))\n    },\n    // 设置障碍物\n    setBarrier() {\n      const minGap = 300 // 障碍物的间隔\n      const maxGap = 800 // 障碍物的间隔\n      const x = this.lastBarrierX + Math.random() * (maxGap - minGap) + minGap // 随机生成 x 坐标\n      const bar = this.barriers_list[Math.floor(Math.random() * this.barriers_list.length)]\n      const n = bar.name\n      const w = bar.width\n      const h = bar.height\n      const y = this.treeY - h\n      this.barriers.push({ n, x, y, w, h }) // 将障碍物添加到数组中\n      this.lastBarrierX = x\n    },\n    // 绘制障碍物\n    drawBarriers() {\n      this.barriers.forEach(barrier => {\n        this.drawPic(barrier.n, barrier.x, barrier.y, barrier.w, barrier.h)\n        barrier.x -= this.speed // 更新障碍物位置\n      })\n      // 移除超出画布的障碍物\n      this.barriers = this.barriers.filter(barrier => barrier.x + 50 > 0)\n    },\n    // 设置家雀\n    setBird() {\n      const minGap = 300 // 家雀的间隔\n      const maxGap = 800 // 家雀的间隔\n      const x = this.lastBarrierX + Math.random() * (maxGap - minGap) + minGap // 随机生成 x 坐标\n      const n = 'bird_up'\n      const w = this.loadedImages['bird_up'].width\n      const h = this.loadedImages['bird_up'].height\n      const y = 50\n      this.birds.push({ n, x, y, w, h }) // 将家雀添加到数组中\n      this.lastBarrierX = x\n    },\n    // 绘制家雀\n    drawBirds() {\n      this.birds.forEach(bird => {\n        this.drawPic(this.currentSwing, bird.x, bird.y, bird.w, bird.h)\n        bird.x -= this.speed // 更新家雀位置\n      })\n      // 移除超出画布的家雀\n      this.birds = this.birds.filter(bird => bird.x + 50 > 0)\n    },\n    // 设置云\n    setCloud() {\n      const minGap = 100 \n      const maxGap = 500 \n      const x = this.lastCloudX + Math.random() * (maxGap - minGap) + minGap // 随机生成 x 坐标\n      const height = Math.random() * 70 + 10\n      this.clouds.push({ x, height })\n      this.lastCloudX = x\n    },\n    // 绘制云\n    drawClouds() {\n      this.clouds.forEach(cloud => {\n        this.drawPic('cloud', cloud.x, cloud.height)\n        cloud.x -= this.speed * 3 / 2\n      })\n      // 移除超出画布的障碍物\n      this.clouds = this.clouds.filter(cloud => cloud.x + 50 > 0)\n    },\n    // 更新分数\n    updateScore() {\n      this.score++\n      let score = Math.floor(this.score)\n      this.scores[0] = score % 10 // 个位\n      this.scores[1] = (score % 100) / 10 // 十位\n      this.scores[2] = (score % 1000) / 100 // 百位\n      this.scores[3] = (score % 10000) / 1000 // 千位\n      this.scores[4] = (score % 100000) / 10000 // 万位\n      this.scores[5] = score / 100000 // 十万位\n    },\n    // 检测碰撞\n    checkCrash() {\n      if(!this.isDied){\n        this.barriers.forEach(barrier => {\n          // 恐龙的右边界超过障碍物的左边界 且 下边界未超过障碍物的上边界\n          if (this.dinoX + this.dinoW >= barrier.x && \n              this.dinoY + this.dinoH >= barrier.y ) {\n            this.gameOver()\n          }\n          // else this.score += 15\n        })\n        this.birds.forEach(bird => {\n          // 恐龙的右边界超过障碍物的左边界 且 下边界未超过障碍物的上边界\n          if (this.dinoX + this.dinoW >= bird.x && \n              this.dinoY <= bird.y + bird.h) {\n            this.gameOver()\n          }\n          // else this.score += 15\n        })\n      }\n    },\n    gameOver() {\n      // 发生碰撞，执行相应的操作\n      console.log(\"碰撞发生！\")\n      this.isDied = true\n      this.isRunning = false\n      this.speed = 0\n\n    },\n    resetGame() {\n      if(this.isDied){\n        window.location.reload()\n      }\n    }\n  },\n  mounted() {\n    this.ctx = document.getElementById('canvas').getContext(\"2d\")\n    // 预加载图片资源\n    const imagePromises = Object.entries(this.images).map(([key, imageSrc]) => {\n      return new Promise((resolve, reject) => {\n        const img = new Image()\n        img.src = require(`/src/assets/images/${imageSrc}.png`)\n\n        img.onload = () => {\n          this.loadedImages[key] = img // 存储已加载的图片\n          resolve()\n        }\n\n        img.onerror = () => {\n          console.error(`加载图片失败: ${img.src}`)\n          reject()\n        }\n      })\n    })\n    \n    // 确保所有图片资源加载完成后再启动动画\n    Promise.all(imagePromises)\n    .then(() => {\n        this.initialize()       // 初始化\n        window.addEventListener('keydown', this.handleKeyDown)  // 监听键盘事件\n        document.getElementById('canvas').addEventListener('click', this.resetGame)\n      })\n      .catch(error => {\n        console.error(\"图片加载失败：\", error)\n      })\n\n  },\n  unmounted() {\n    if (this.legTimer) {\n      clearInterval(this.legTimer)\n    }\n    if (this.swingTimer) {\n      clearInterval(this.swingTimer)\n    }\n    if (this.updateScore) {\n      clearInterval(this.updateScore)\n    }\n    document.getElementById('canvas').removeEventListener('click', this.resetGame)\n    // window.removeEventListener('keydown', this.handleKeyDown)\n  }\n\n}\n</script>\n\n<style scoped>\n  #canvas {\n    background-color: #fff;\n  }\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAM;mBADnB;;uBACEC,mBAAA,CAEM,OAFNC,UAEM,GADJC,mBAAA,CAAkE;IAA1DC,EAAE,EAAC,QAAQ;IAAEC,KAAK,EAAEC,KAAA,CAAAC,WAAW;IAAGC,MAAM,EAAEF,KAAA,CAAAG;0BAFtDC,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}