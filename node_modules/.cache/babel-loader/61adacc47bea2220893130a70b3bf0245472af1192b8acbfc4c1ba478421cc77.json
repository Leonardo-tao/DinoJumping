{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'playGame',\n  data() {\n    return {\n      ctx: null,\n      canvasWidth: 1200,\n      canvasHeight: 150,\n      speed: 0,\n      // 画面移动速度\n      groundX: 0,\n      // 地面坐标\n      isRunning: false,\n      // 地面是否开始移动\n      currentLeg: 'left',\n      // 当前小恐龙腿的状态\n      legTimer: null,\n      // 控制左右脚切换的定时器\n      pace: 500,\n      // 步频\n      isJumping: false,\n      // 跳跃状态\n      jumpHeight: 0,\n      // 当前跳跃高度\n      gravity: 3,\n      // 重力加速度\n      barriers: [],\n      clouds: [],\n      barriers_list: ['treeS', 'treeB', 'treeG'],\n      lastBarrierX: 1200,\n      lastCloudX: 1200,\n      loadedImages: {},\n      // 存储加载后的图片\n      images: {\n        initial: \"initial\",\n        start: \"start\",\n        die: \"die\",\n        ground: \"ground\",\n        left: \"runl\",\n        right: \"runr\",\n        jump: \"start\",\n        bird_up: \"bird_up\",\n        bird_down: \"bird_down\",\n        treeS: \"treeS\",\n        treeB: \"treeB\",\n        treeG: \"treeG\",\n        endText: \"endText\",\n        restart: \"restart\",\n        cloud: \"cloud\",\n        \"0\": \"0\",\n        \"1\": \"1\",\n        \"2\": \"2\",\n        \"3\": \"3\",\n        \"4\": \"4\",\n        \"5\": \"5\",\n        \"6\": \"6\",\n        \"7\": \"7\",\n        \"8\": \"8\",\n        \"9\": \"9\"\n      }\n    };\n  },\n  computed: {\n    groundW: function () {\n      return this.loadedImages['ground'].width;\n    },\n    groundH: function () {\n      return this.loadedImages['ground'].height;\n    },\n    dinoW: function () {\n      return this.loadedImages['initial'].width;\n    },\n    dinoH: function () {\n      return this.loadedImages['initial'].height;\n    },\n    groundY: function () {\n      return this.canvasHeight - this.loadedImages['ground'].height - this.dinoH;\n    }\n  },\n  methods: {\n    // 绘制图片\n    drawPic(pic, x, y, w, h) {\n      let img = this.loadedImages[pic]; // 使用已加载的图片\n\n      if (!img) return; // 如果图片尚未加载，直接返回\n\n      if (w === undefined) w = img.width;\n      if (h === undefined) h = img.height;\n      if (y === undefined) y = this.groundY;\n      if (x === undefined) x = 0;\n      this.ctx.drawImage(img, x, y, w, h);\n    },\n    // 更新地面位置\n    updateGroundPosition() {\n      this.groundX -= this.speed;\n      if (this.groundX <= -this.canvasWidth) {\n        this.groundX = 0;\n      }\n    },\n    handleKeyDown(e) {\n      if (e.key === 'Enter' && !this.isRunning) {\n        this.isRunning = true;\n        this.speed = 1;\n        this.play(); // 启动动画\n      }\n      if (this.isRunning && e.key === ' ' && !this.isJumping) {\n        // 按下空格键\n        this.isJumping = true; // 标记为正在跳跃\n        this.jumpHeight = 0; // 重置跳跃高度\n      }\n    },\n    // 加速函数\n    accelerate() {\n      this.speed += 0.001;\n      this.pace -= 1;\n    },\n    // 跳跃\n    updateJump() {\n      if (this.isJumping) {\n        // 当跳跃达到一定高度后，开始下降\n        if (this.jumpHeight < 70) {\n          // 设定跳跃高度阈值\n          this.jumpHeight += this.gravity; // 增加跳跃高度\n        } else if (this.jumpHeight >= 70 && this.jumpHeight < 70 + 0.3 * 60) {\n          this;\n        }\n\n        // 检查是否回到地面\n        if (this.jumpHeight <= 0) {\n          this.jumpHeight = 0; // 重置高度\n          this.isJumping = false; // 跳跃结束\n          this.gravity = 5; // 重置重力加速度\n        }\n      }\n    },\n    initialize() {\n      // 绘制地面和小恐龙\n      this.drawPic('ground', this.groundX, this.canvasHeight - this.groundH - 10);\n      this.drawPic('start', 10, this.groundY); // 根据跳跃状态调整y坐标\n      // 开始切换左右脚\n      this.legTimer = setInterval(() => {\n        this.currentLeg = this.currentLeg === 'left' ? 'right' : 'left';\n      }, this.pace);\n    },\n    // 开始跑步，地面移动 + 小恐龙切换左右脚\n    play() {\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n      // 绘制地面和小恐龙\n      this.drawBarriers();\n      this.drawClouds();\n      this.drawPic('ground', this.groundX, this.canvasHeight - this.groundH - 10);\n      this.drawPic('ground', this.groundX + this.canvasWidth, this.canvasHeight - this.groundH - 10);\n      const dinoY = this.isJumping ? this.groundY - this.jumpHeight : this.groundY;\n      this.drawPic(this.isRunning ? this.currentLeg : 'start', 10, dinoY); // 根据跳跃状态调整y坐标\n\n      // 地面开始移动\n      this.updateGroundPosition(); // 地面移动\n      this.accelerate(); // 设置加速\n      this.updateJump(); // 更新跳跃\n\n      // 每隔一定时间生成障碍物\n      if (this.barriers.length === 0 || Math.random() < 0.02) {\n        // 设定生成概率\n        this.setBarrier();\n      }\n      // 每隔一定时间生成云\n      if (this.clouds.length === 0 || Math.random() < 2) {\n        // 设定生成概率\n        this.setCloud();\n      }\n\n      // 请求下一帧动画\n      requestAnimationFrame(this.play.bind(this));\n    },\n    // 设置障碍物\n    setBarrier() {\n      const minGap = 300; // 障碍物的间隔\n      const maxGap = 800; // 障碍物的间隔\n      const x = this.lastBarrierX + Math.random() * (maxGap - minGap) + minGap; // 随机生成 x 坐标\n      const height = this.groundY;\n      this.barriers.push({\n        x,\n        height\n      }); // 将障碍物添加到数组中\n      this.lastBarrierX = x;\n    },\n    // 绘制障碍物\n    drawBarriers() {\n      this.barriers.forEach(barrier => {\n        this.drawPic('treeS', barrier.x, barrier.height);\n        barrier.x -= this.speed; // 更新障碍物位置\n      });\n      // 移除超出画布的障碍物\n      this.barriers = this.barriers.filter(barrier => barrier.x + 50 > 0);\n    },\n    // 设置云\n    setCloud() {\n      const minGap = 100;\n      const maxGap = 500;\n      const x = this.lastCloudX + Math.random() * (maxGap - minGap) + minGap; // 随机生成 x 坐标\n      const height = Math.random() * 70 + 10;\n      this.clouds.push({\n        x,\n        height\n      });\n      this.lastCloudX = x;\n    },\n    // 绘制云\n    drawClouds() {\n      this.clouds.forEach(cloud => {\n        this.drawPic('cloud', cloud.x, cloud.height);\n        cloud.x -= this.speed / 2;\n      });\n      // 移除超出画布的障碍物\n      this.clouds = this.clouds.filter(cloud => cloud.x + 50 > 0);\n    }\n  },\n  mounted() {\n    this.ctx = document.getElementById('canvas').getContext(\"2d\");\n\n    // 预加载图片资源\n    const imagePromises = Object.entries(this.images).map(([key, imageSrc]) => {\n      return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.src = require(`/src/assets/images/${imageSrc}.png`);\n        img.onload = () => {\n          this.loadedImages[key] = img; // 存储已加载的图片\n          resolve();\n        };\n        img.onerror = () => {\n          console.error(`加载图片失败: ${img.src}`);\n          reject();\n        };\n      });\n    });\n\n    // 确保所有图片资源加载完成后再启动动画\n    Promise.all(imagePromises).then(() => {\n      this.initialize(); // 初始化\n      window.addEventListener('keydown', this.handleKeyDown); // 监听键盘事件\n    }).catch(error => {\n      console.error(\"图片加载失败：\", error);\n    });\n  },\n  unmounted() {\n    if (this.legTimer) {\n      clearInterval(this.legTimer);\n    }\n    if (this.jumpTimer) {\n      clearInterval(this.jumpTimer);\n    }\n    // window.removeEventListener('keydown', this.handleKeyDown)\n  }\n};","map":{"version":3,"names":["name","data","ctx","canvasWidth","canvasHeight","speed","groundX","isRunning","currentLeg","legTimer","pace","isJumping","jumpHeight","gravity","barriers","clouds","barriers_list","lastBarrierX","lastCloudX","loadedImages","images","initial","start","die","ground","left","right","jump","bird_up","bird_down","treeS","treeB","treeG","endText","restart","cloud","computed","groundW","width","groundH","height","dinoW","dinoH","groundY","methods","drawPic","pic","x","y","w","h","img","undefined","drawImage","updateGroundPosition","handleKeyDown","e","key","play","accelerate","updateJump","initialize","setInterval","clearRect","drawBarriers","drawClouds","dinoY","length","Math","random","setBarrier","setCloud","requestAnimationFrame","bind","minGap","maxGap","push","forEach","barrier","filter","mounted","document","getElementById","getContext","imagePromises","Object","entries","map","imageSrc","Promise","resolve","reject","Image","src","require","onload","onerror","console","error","all","then","window","addEventListener","catch","unmounted","clearInterval","jumpTimer"],"sources":["E:\\code\\Web\\dino\\src\\components\\game.vue"],"sourcesContent":["<template>\n  <div class=\"game\">\n    <canvas id=\"canvas\" :width=\"canvasWidth\" :height=\"canvasHeight\" />\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'playGame',\n  data() {\n    return {\n      ctx: null,\n      canvasWidth: 1200,\n      canvasHeight: 150,\n      speed: 0,                   // 画面移动速度\n      groundX: 0,                 // 地面坐标\n      isRunning: false,           // 地面是否开始移动\n      currentLeg: 'left',         // 当前小恐龙腿的状态\n      legTimer: null,             // 控制左右脚切换的定时器\n      pace: 500,                  // 步频\n      isJumping: false,           // 跳跃状态\n      jumpHeight: 0,              // 当前跳跃高度\n      gravity: 3,                 // 重力加速度\n      barriers: [],\n      clouds: [],\n      barriers_list: ['treeS', 'treeB', 'treeG'],\n      lastBarrierX: 1200,\n      lastCloudX: 1200,\n      loadedImages: {},           // 存储加载后的图片\n      images: {\n        initial: \"initial\",\n        start: \"start\",\n        die: \"die\",\n        ground: \"ground\",\n        left: \"runl\",\n        right: \"runr\",\n        jump: \"start\",\n        bird_up: \"bird_up\", \n        bird_down: \"bird_down\",\n        treeS: \"treeS\",\n        treeB: \"treeB\",\n        treeG: \"treeG\",\n        endText: \"endText\",\n        restart: \"restart\",\n        cloud: \"cloud\",\n        \"0\":\"0\",\n        \"1\":\"1\",\n        \"2\":\"2\",\n        \"3\":\"3\",\n        \"4\":\"4\",\n        \"5\":\"5\",\n        \"6\":\"6\",\n        \"7\":\"7\",\n        \"8\":\"8\",\n        \"9\":\"9\"\n      }\n    }\n  },\n  computed: {\n    groundW: function() {return this.loadedImages['ground'].width},\n    groundH: function() {return this.loadedImages['ground'].height},\n    dinoW: function() {return this.loadedImages['initial'].width},\n    dinoH: function() {return this.loadedImages['initial'].height},\n    groundY: function() {\n      return this.canvasHeight - this.loadedImages['ground'].height - this.dinoH\n    }\n  },\n  methods: {\n    // 绘制图片\n    drawPic(pic, x, y, w, h) {\n      let img = this.loadedImages[pic] // 使用已加载的图片\n\n      if (!img) return // 如果图片尚未加载，直接返回\n\n      if (w === undefined) w = img.width\n      if (h === undefined) h = img.height\n      if (y === undefined) y = this.groundY\n      if (x === undefined) x = 0\n\n      this.ctx.drawImage(img, x, y, w, h)\n    },\n    // 更新地面位置\n    updateGroundPosition() {\n      this.groundX -= this.speed\n\n      if (this.groundX <= -this.canvasWidth) {\n        this.groundX = 0\n      }\n    },\n    handleKeyDown(e) {\n      if (e.key === 'Enter' && !this.isRunning) {\n        this.isRunning = true\n        this.speed = 1\n        this.play() // 启动动画\n      }\n\n      if (this.isRunning && e.key === ' ' && !this.isJumping) { // 按下空格键\n        this.isJumping = true // 标记为正在跳跃\n        this.jumpHeight = 0 // 重置跳跃高度\n      }\n    },\n    // 加速函数\n    accelerate() {\n      this.speed += 0.001\n      this.pace -= 1\n    },\n    // 跳跃\n    updateJump() {\n      if (this.isJumping) {\n        // 当跳跃达到一定高度后，开始下降\n        if (this.jumpHeight < 70) { // 设定跳跃高度阈值\n          this.jumpHeight += this.gravity // 增加跳跃高度\n        }else if (this.jumpHeight >= 70 && this.jumpHeight < 70 + 0.3 * 60) {\n          this\n        }\n        \n        // 检查是否回到地面\n        if (this.jumpHeight <= 0) {\n          this.jumpHeight = 0 // 重置高度\n          this.isJumping = false // 跳跃结束\n          this.gravity = 5 // 重置重力加速度\n        }\n      }\n    },\n    initialize(){\n      // 绘制地面和小恐龙\n      this.drawPic('ground', this.groundX, this.canvasHeight - this.groundH - 10)\n      this.drawPic('start', 10, this.groundY)  // 根据跳跃状态调整y坐标\n          // 开始切换左右脚\n      this.legTimer = setInterval(() => {\n        this.currentLeg = this.currentLeg === 'left' ? 'right' : 'left'\n      }, this.pace)\n    },\n    // 开始跑步，地面移动 + 小恐龙切换左右脚\n    play() {\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight)\n      // 绘制地面和小恐龙\n      this.drawBarriers()\n      this.drawClouds()\n      this.drawPic('ground', this.groundX, this.canvasHeight - this.groundH - 10)\n      this.drawPic('ground', this.groundX + this.canvasWidth, this.canvasHeight - this.groundH - 10)\n      const dinoY = this.isJumping ? (this.groundY - this.jumpHeight) : this.groundY\n\n      this.drawPic(this.isRunning ? this.currentLeg : 'start', 10,dinoY)  // 根据跳跃状态调整y坐标\n  \n\n      // 地面开始移动\n      this.updateGroundPosition() // 地面移动\n      this.accelerate() // 设置加速\n      this.updateJump() // 更新跳跃\n\n      // 每隔一定时间生成障碍物\n      if (this.barriers.length === 0 || Math.random() < 0.02) { // 设定生成概率\n        this.setBarrier()\n      }\n      // 每隔一定时间生成云\n      if (this.clouds.length === 0 || Math.random() < 2) { // 设定生成概率\n        this.setCloud()\n      }\n\n      // 请求下一帧动画\n      requestAnimationFrame(this.play.bind(this))\n    },\n    // 设置障碍物\n    setBarrier() {\n      const minGap = 300 // 障碍物的间隔\n      const maxGap = 800 // 障碍物的间隔\n      const x = this.lastBarrierX + Math.random() * (maxGap - minGap) + minGap // 随机生成 x 坐标\n      const height = this.groundY\n      this.barriers.push({ x, height }) // 将障碍物添加到数组中\n      this.lastBarrierX = x\n    },\n    // 绘制障碍物\n    drawBarriers() {\n      this.barriers.forEach(barrier => {\n        this.drawPic('treeS', barrier.x, barrier.height)\n        barrier.x -= this.speed // 更新障碍物位置\n      })\n      // 移除超出画布的障碍物\n      this.barriers = this.barriers.filter(barrier => barrier.x + 50 > 0)\n    },\n    // 设置云\n    setCloud() {\n      const minGap = 100 \n      const maxGap = 500 \n      const x = this.lastCloudX + Math.random() * (maxGap - minGap) + minGap // 随机生成 x 坐标\n      const height = Math.random() * 70 + 10\n      this.clouds.push({ x, height })\n      this.lastCloudX = x\n    },\n    // 绘制云\n    drawClouds() {\n      this.clouds.forEach(cloud => {\n        this.drawPic('cloud', cloud.x, cloud.height)\n        cloud.x -= this.speed / 2\n      })\n      // 移除超出画布的障碍物\n      this.clouds = this.clouds.filter(cloud => cloud.x + 50 > 0)\n    },\n  },\n  mounted() {\n    this.ctx = document.getElementById('canvas').getContext(\"2d\")\n\n    // 预加载图片资源\n    const imagePromises = Object.entries(this.images).map(([key, imageSrc]) => {\n      return new Promise((resolve, reject) => {\n        const img = new Image()\n        img.src = require(`/src/assets/images/${imageSrc}.png`)\n\n        img.onload = () => {\n          this.loadedImages[key] = img // 存储已加载的图片\n          resolve()\n        }\n\n        img.onerror = () => {\n          console.error(`加载图片失败: ${img.src}`)\n          reject()\n        }\n      })\n    })\n    \n    // 确保所有图片资源加载完成后再启动动画\n    Promise.all(imagePromises)\n    .then(() => {\n        this.initialize()       // 初始化\n        window.addEventListener('keydown', this.handleKeyDown)  // 监听键盘事件\n      })\n      .catch(error => {\n        console.error(\"图片加载失败：\", error)\n      })\n  },\n  unmounted() {\n    if (this.legTimer) {\n      clearInterval(this.legTimer)\n    }\n    if (this.jumpTimer) {\n      clearInterval(this.jumpTimer)\n    }\n    // window.removeEventListener('keydown', this.handleKeyDown)\n  }\n\n}\n</script>\n\n<style scoped>\n  #canvas {\n    background-color: #fff;\n  }\n</style>\n"],"mappings":";AAOA,eAAe;EACbA,IAAI,EAAE,UAAU;EAChBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,GAAG,EAAE,IAAI;MACTC,WAAW,EAAE,IAAI;MACjBC,YAAY,EAAE,GAAG;MACjBC,KAAK,EAAE,CAAC;MAAoB;MAC5BC,OAAO,EAAE,CAAC;MAAkB;MAC5BC,SAAS,EAAE,KAAK;MAAY;MAC5BC,UAAU,EAAE,MAAM;MAAU;MAC5BC,QAAQ,EAAE,IAAI;MAAc;MAC5BC,IAAI,EAAE,GAAG;MAAmB;MAC5BC,SAAS,EAAE,KAAK;MAAY;MAC5BC,UAAU,EAAE,CAAC;MAAe;MAC5BC,OAAO,EAAE,CAAC;MAAkB;MAC5BC,QAAQ,EAAE,EAAE;MACZC,MAAM,EAAE,EAAE;MACVC,aAAa,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;MAC1CC,YAAY,EAAE,IAAI;MAClBC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,CAAC,CAAC;MAAY;MAC5BC,MAAM,EAAE;QACNC,OAAO,EAAE,SAAS;QAClBC,KAAK,EAAE,OAAO;QACdC,GAAG,EAAE,KAAK;QACVC,MAAM,EAAE,QAAQ;QAChBC,IAAI,EAAE,MAAM;QACZC,KAAK,EAAE,MAAM;QACbC,IAAI,EAAE,OAAO;QACbC,OAAO,EAAE,SAAS;QAClBC,SAAS,EAAE,WAAW;QACtBC,KAAK,EAAE,OAAO;QACdC,KAAK,EAAE,OAAO;QACdC,KAAK,EAAE,OAAO;QACdC,OAAO,EAAE,SAAS;QAClBC,OAAO,EAAE,SAAS;QAClBC,KAAK,EAAE,OAAO;QACd,GAAG,EAAC,GAAG;QACP,GAAG,EAAC,GAAG;QACP,GAAG,EAAC,GAAG;QACP,GAAG,EAAC,GAAG;QACP,GAAG,EAAC,GAAG;QACP,GAAG,EAAC,GAAG;QACP,GAAG,EAAC,GAAG;QACP,GAAG,EAAC,GAAG;QACP,GAAG,EAAC,GAAG;QACP,GAAG,EAAC;MACN;IACF;EACF,CAAC;EACDC,QAAQ,EAAE;IACRC,OAAO,EAAE,SAAAA,CAAA,EAAW;MAAC,OAAO,IAAI,CAAClB,YAAY,CAAC,QAAQ,CAAC,CAACmB,KAAK;IAAA,CAAC;IAC9DC,OAAO,EAAE,SAAAA,CAAA,EAAW;MAAC,OAAO,IAAI,CAACpB,YAAY,CAAC,QAAQ,CAAC,CAACqB,MAAM;IAAA,CAAC;IAC/DC,KAAK,EAAE,SAAAA,CAAA,EAAW;MAAC,OAAO,IAAI,CAACtB,YAAY,CAAC,SAAS,CAAC,CAACmB,KAAK;IAAA,CAAC;IAC7DI,KAAK,EAAE,SAAAA,CAAA,EAAW;MAAC,OAAO,IAAI,CAACvB,YAAY,CAAC,SAAS,CAAC,CAACqB,MAAM;IAAA,CAAC;IAC9DG,OAAO,EAAE,SAAAA,CAAA,EAAW;MAClB,OAAO,IAAI,CAACvC,YAAW,GAAI,IAAI,CAACe,YAAY,CAAC,QAAQ,CAAC,CAACqB,MAAK,GAAI,IAAI,CAACE,KAAI;IAC3E;EACF,CAAC;EACDE,OAAO,EAAE;IACP;IACAC,OAAOA,CAACC,GAAG,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;MACvB,IAAIC,GAAE,GAAI,IAAI,CAAChC,YAAY,CAAC2B,GAAG,GAAE;;MAEjC,IAAI,CAACK,GAAG,EAAE,OAAK,CAAE;;MAEjB,IAAIF,CAAA,KAAMG,SAAS,EAAEH,CAAA,GAAIE,GAAG,CAACb,KAAI;MACjC,IAAIY,CAAA,KAAME,SAAS,EAAEF,CAAA,GAAIC,GAAG,CAACX,MAAK;MAClC,IAAIQ,CAAA,KAAMI,SAAS,EAAEJ,CAAA,GAAI,IAAI,CAACL,OAAM;MACpC,IAAII,CAAA,KAAMK,SAAS,EAAEL,CAAA,GAAI;MAEzB,IAAI,CAAC7C,GAAG,CAACmD,SAAS,CAACF,GAAG,EAAEJ,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC;IACpC,CAAC;IACD;IACAI,oBAAoBA,CAAA,EAAG;MACrB,IAAI,CAAChD,OAAM,IAAK,IAAI,CAACD,KAAI;MAEzB,IAAI,IAAI,CAACC,OAAM,IAAK,CAAC,IAAI,CAACH,WAAW,EAAE;QACrC,IAAI,CAACG,OAAM,GAAI;MACjB;IACF,CAAC;IACDiD,aAAaA,CAACC,CAAC,EAAE;MACf,IAAIA,CAAC,CAACC,GAAE,KAAM,OAAM,IAAK,CAAC,IAAI,CAAClD,SAAS,EAAE;QACxC,IAAI,CAACA,SAAQ,GAAI,IAAG;QACpB,IAAI,CAACF,KAAI,GAAI;QACb,IAAI,CAACqD,IAAI,CAAC,GAAE;MACd;MAEA,IAAI,IAAI,CAACnD,SAAQ,IAAKiD,CAAC,CAACC,GAAE,KAAM,GAAE,IAAK,CAAC,IAAI,CAAC9C,SAAS,EAAE;QAAE;QACxD,IAAI,CAACA,SAAQ,GAAI,IAAG,EAAE;QACtB,IAAI,CAACC,UAAS,GAAI,GAAE;MACtB;IACF,CAAC;IACD;IACA+C,UAAUA,CAAA,EAAG;MACX,IAAI,CAACtD,KAAI,IAAK,KAAI;MAClB,IAAI,CAACK,IAAG,IAAK;IACf,CAAC;IACD;IACAkD,UAAUA,CAAA,EAAG;MACX,IAAI,IAAI,CAACjD,SAAS,EAAE;QAClB;QACA,IAAI,IAAI,CAACC,UAAS,GAAI,EAAE,EAAE;UAAE;UAC1B,IAAI,CAACA,UAAS,IAAK,IAAI,CAACC,OAAM,EAAE;QAClC,CAAC,MAAK,IAAI,IAAI,CAACD,UAAS,IAAK,EAAC,IAAK,IAAI,CAACA,UAAS,GAAI,EAAC,GAAI,GAAE,GAAI,EAAE,EAAE;UAClE,IAAG;QACL;;QAEA;QACA,IAAI,IAAI,CAACA,UAAS,IAAK,CAAC,EAAE;UACxB,IAAI,CAACA,UAAS,GAAI,GAAE;UACpB,IAAI,CAACD,SAAQ,GAAI,KAAI,EAAE;UACvB,IAAI,CAACE,OAAM,GAAI,GAAE;QACnB;MACF;IACF,CAAC;IACDgD,UAAUA,CAAA,EAAE;MACV;MACA,IAAI,CAAChB,OAAO,CAAC,QAAQ,EAAE,IAAI,CAACvC,OAAO,EAAE,IAAI,CAACF,YAAW,GAAI,IAAI,CAACmC,OAAM,GAAI,EAAE;MAC1E,IAAI,CAACM,OAAO,CAAC,OAAO,EAAE,EAAE,EAAE,IAAI,CAACF,OAAO,GAAG;MACrC;MACJ,IAAI,CAAClC,QAAO,GAAIqD,WAAW,CAAC,MAAM;QAChC,IAAI,CAACtD,UAAS,GAAI,IAAI,CAACA,UAAS,KAAM,MAAK,GAAI,OAAM,GAAI,MAAK;MAChE,CAAC,EAAE,IAAI,CAACE,IAAI;IACd,CAAC;IACD;IACAgD,IAAIA,CAAA,EAAG;MACL,IAAI,CAACxD,GAAG,CAAC6D,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC5D,WAAW,EAAE,IAAI,CAACC,YAAY;MAC5D;MACA,IAAI,CAAC4D,YAAY,CAAC;MAClB,IAAI,CAACC,UAAU,CAAC;MAChB,IAAI,CAACpB,OAAO,CAAC,QAAQ,EAAE,IAAI,CAACvC,OAAO,EAAE,IAAI,CAACF,YAAW,GAAI,IAAI,CAACmC,OAAM,GAAI,EAAE;MAC1E,IAAI,CAACM,OAAO,CAAC,QAAQ,EAAE,IAAI,CAACvC,OAAM,GAAI,IAAI,CAACH,WAAW,EAAE,IAAI,CAACC,YAAW,GAAI,IAAI,CAACmC,OAAM,GAAI,EAAE;MAC7F,MAAM2B,KAAI,GAAI,IAAI,CAACvD,SAAQ,GAAK,IAAI,CAACgC,OAAM,GAAI,IAAI,CAAC/B,UAAU,GAAI,IAAI,CAAC+B,OAAM;MAE7E,IAAI,CAACE,OAAO,CAAC,IAAI,CAACtC,SAAQ,GAAI,IAAI,CAACC,UAAS,GAAI,OAAO,EAAE,EAAE,EAAC0D,KAAK,GAAG;;MAGpE;MACA,IAAI,CAACZ,oBAAoB,CAAC,GAAE;MAC5B,IAAI,CAACK,UAAU,CAAC,GAAE;MAClB,IAAI,CAACC,UAAU,CAAC,GAAE;;MAElB;MACA,IAAI,IAAI,CAAC9C,QAAQ,CAACqD,MAAK,KAAM,KAAKC,IAAI,CAACC,MAAM,CAAC,IAAI,IAAI,EAAE;QAAE;QACxD,IAAI,CAACC,UAAU,CAAC;MAClB;MACA;MACA,IAAI,IAAI,CAACvD,MAAM,CAACoD,MAAK,KAAM,KAAKC,IAAI,CAACC,MAAM,CAAC,IAAI,CAAC,EAAE;QAAE;QACnD,IAAI,CAACE,QAAQ,CAAC;MAChB;;MAEA;MACAC,qBAAqB,CAAC,IAAI,CAACd,IAAI,CAACe,IAAI,CAAC,IAAI,CAAC;IAC5C,CAAC;IACD;IACAH,UAAUA,CAAA,EAAG;MACX,MAAMI,MAAK,GAAI,GAAE,EAAE;MACnB,MAAMC,MAAK,GAAI,GAAE,EAAE;MACnB,MAAM5B,CAAA,GAAI,IAAI,CAAC9B,YAAW,GAAImD,IAAI,CAACC,MAAM,CAAC,KAAKM,MAAK,GAAID,MAAM,IAAIA,MAAK,EAAE;MACzE,MAAMlC,MAAK,GAAI,IAAI,CAACG,OAAM;MAC1B,IAAI,CAAC7B,QAAQ,CAAC8D,IAAI,CAAC;QAAE7B,CAAC;QAAEP;MAAO,CAAC,GAAE;MAClC,IAAI,CAACvB,YAAW,GAAI8B,CAAA;IACtB,CAAC;IACD;IACAiB,YAAYA,CAAA,EAAG;MACb,IAAI,CAAClD,QAAQ,CAAC+D,OAAO,CAACC,OAAM,IAAK;QAC/B,IAAI,CAACjC,OAAO,CAAC,OAAO,EAAEiC,OAAO,CAAC/B,CAAC,EAAE+B,OAAO,CAACtC,MAAM;QAC/CsC,OAAO,CAAC/B,CAAA,IAAK,IAAI,CAAC1C,KAAI,EAAE;MAC1B,CAAC;MACD;MACA,IAAI,CAACS,QAAO,GAAI,IAAI,CAACA,QAAQ,CAACiE,MAAM,CAACD,OAAM,IAAKA,OAAO,CAAC/B,CAAA,GAAI,EAAC,GAAI,CAAC;IACpE,CAAC;IACD;IACAwB,QAAQA,CAAA,EAAG;MACT,MAAMG,MAAK,GAAI,GAAE;MACjB,MAAMC,MAAK,GAAI,GAAE;MACjB,MAAM5B,CAAA,GAAI,IAAI,CAAC7B,UAAS,GAAIkD,IAAI,CAACC,MAAM,CAAC,KAAKM,MAAK,GAAID,MAAM,IAAIA,MAAK,EAAE;MACvE,MAAMlC,MAAK,GAAI4B,IAAI,CAACC,MAAM,CAAC,IAAI,EAAC,GAAI,EAAC;MACrC,IAAI,CAACtD,MAAM,CAAC6D,IAAI,CAAC;QAAE7B,CAAC;QAAEP;MAAO,CAAC;MAC9B,IAAI,CAACtB,UAAS,GAAI6B,CAAA;IACpB,CAAC;IACD;IACAkB,UAAUA,CAAA,EAAG;MACX,IAAI,CAAClD,MAAM,CAAC8D,OAAO,CAAC1C,KAAI,IAAK;QAC3B,IAAI,CAACU,OAAO,CAAC,OAAO,EAAEV,KAAK,CAACY,CAAC,EAAEZ,KAAK,CAACK,MAAM;QAC3CL,KAAK,CAACY,CAAA,IAAK,IAAI,CAAC1C,KAAI,GAAI;MAC1B,CAAC;MACD;MACA,IAAI,CAACU,MAAK,GAAI,IAAI,CAACA,MAAM,CAACgE,MAAM,CAAC5C,KAAI,IAAKA,KAAK,CAACY,CAAA,GAAI,EAAC,GAAI,CAAC;IAC5D;EACF,CAAC;EACDiC,OAAOA,CAAA,EAAG;IACR,IAAI,CAAC9E,GAAE,GAAI+E,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC,CAACC,UAAU,CAAC,IAAI;;IAE5D;IACA,MAAMC,aAAY,GAAIC,MAAM,CAACC,OAAO,CAAC,IAAI,CAAClE,MAAM,CAAC,CAACmE,GAAG,CAAC,CAAC,CAAC9B,GAAG,EAAE+B,QAAQ,CAAC,KAAK;MACzE,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACtC,MAAMxC,GAAE,GAAI,IAAIyC,KAAK,CAAC;QACtBzC,GAAG,CAAC0C,GAAE,GAAIC,OAAO,CAAC,sBAAsBN,QAAQ,MAAM;QAEtDrC,GAAG,CAAC4C,MAAK,GAAI,MAAM;UACjB,IAAI,CAAC5E,YAAY,CAACsC,GAAG,IAAIN,GAAE,EAAE;UAC7BuC,OAAO,CAAC;QACV;QAEAvC,GAAG,CAAC6C,OAAM,GAAI,MAAM;UAClBC,OAAO,CAACC,KAAK,CAAC,WAAW/C,GAAG,CAAC0C,GAAG,EAAE;UAClCF,MAAM,CAAC;QACT;MACF,CAAC;IACH,CAAC;;IAED;IACAF,OAAO,CAACU,GAAG,CAACf,aAAa,EACxBgB,IAAI,CAAC,MAAM;MACR,IAAI,CAACvC,UAAU,CAAC,GAAQ;MACxBwC,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC/C,aAAa,GAAG;IAC1D,CAAC,EACAgD,KAAK,CAACL,KAAI,IAAK;MACdD,OAAO,CAACC,KAAK,CAAC,SAAS,EAAEA,KAAK;IAChC,CAAC;EACL,CAAC;EACDM,SAASA,CAAA,EAAG;IACV,IAAI,IAAI,CAAC/F,QAAQ,EAAE;MACjBgG,aAAa,CAAC,IAAI,CAAChG,QAAQ;IAC7B;IACA,IAAI,IAAI,CAACiG,SAAS,EAAE;MAClBD,aAAa,CAAC,IAAI,CAACC,SAAS;IAC9B;IACA;EACF;AAEF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}